"""
Cerebras LLM –º–æ–¥—É–ª—å (–û–ß–ï–ù–¨ –ë–´–°–¢–†–´–ô)
‚ö° –°–ö–û–†–û–°–¢–¨: 1800+ tokens/sec (–≤ 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ Gemini/GPT)
üéØ –ö–ê–ß–ï–°–¢–í–û: llama3.3-70b - –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
üí∞ –¶–ï–ù–ê: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π tier + –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ

‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3B: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Cerebras –∫–∞–∫ –±—ã—Å—Ç—Ä–æ–π LLM –º–æ–¥–µ–ª–∏
Cerebras –≤ 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ Gemini Flash –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∂–µ–ª–µ–∑—É.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤. –°–º. OPTIMIZATION_TABLE.md - –∫–æ–¥ 3B
"""
from __future__ import annotations

import os
from typing import Optional, List

from loguru import logger

try:
    from openai import OpenAI  # Cerebras –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
    CEREBRAS_AVAILABLE = True
except ImportError:
    CEREBRAS_AVAILABLE = False
    logger.warning("openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Cerebras –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


class CerebrasLLM:
    """
    Cerebras LLM wrapper (OpenAI-compatible API)
    
    –¢—Ä–µ–±—É–µ—Ç:
    1. pip install openai
    2. CEREBRAS_API_KEY –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    –ú–æ–¥–µ–ª–∏:
    - llama3.3-70b: ‚≠ê –†–ï–ö–û–ú–ï–ù–î–£–Æ - —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è, –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    - llama-3.1-70b: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
    
    –°–∫–æ—Ä–æ—Å—Ç—å: 1800+ tokens/sec (–≤ 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ Gemini Flash!)
    """
    
    def __init__(
        self,
        api_key: Optional[str] = None,
        model: str = "llama3.3-70b",
        base_url: str = "https://api.cerebras.ai/v1",
        max_tokens: int = 256,
        temperature: float = 0.3,
    ):
        if not CEREBRAS_AVAILABLE:
            raise RuntimeError(
                "openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai"
            )
        
        self.api_key = api_key or os.getenv("CEREBRAS_API_KEY")
        if not self.api_key:
            raise RuntimeError(
                "CEREBRAS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! "
                "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://cloud.cerebras.ai/ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env"
            )
        
        self.model = model
        self.max_tokens = max_tokens
        self.temperature = temperature
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç (OpenAI-compatible)
        try:
            self.client = OpenAI(api_key=self.api_key, base_url=base_url)
            logger.info(f"Cerebras LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: model={self.model}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Cerebras: {e}")
            raise
    
    def generate_theses(
        self,
        question: str,
        context: Optional[str] = None,
        n: int = 5,
        system_prompt: Optional[str] = None,
    ) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∑–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Cerebras
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ç–µ–∑–∏—Å–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö |||)
        """
        if not question or not question.strip():
            return []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ThesisGenerator)
        context_section = ""
        if context and context.strip():
            context_section = (
                f"üìö –ö–û–ù–¢–ï–ö–°–¢ (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã):\n{context.strip()}\n\n"
                f"‚ö†Ô∏è –ö–û–ù–¢–ï–ö–°–¢ –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π!\n\n"
            )
        
        user_prompt = (
            f"{context_section}"
            f"‚ùì –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–° (–æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –Ω–µ–≥–æ!):\n{question.strip()}\n\n"
            f"–ó–ê–î–ê–ß–ê: –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {n} —Ç–µ–∑–∏—Å–æ–≤.\n\n"
            f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú –°–õ–û–í–û–ú!\n\n"
            f"–ü–†–ò–ú–ï–†–´ –ü–†–ê–í–ò–õ–¨–ù–û–ô –°–¢–†–£–ö–¢–£–†–´:\n"
            f"–í–æ–ø—Ä–æ—Å: '–ö—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ—Ç–µ–ª –≤ –∫–æ—Å–º–æ—Å?'\n"
            f"‚úÖ '–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω - –ø–µ—Ä–≤—ã–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç'\n"
            f"‚úÖ '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –∞–ø—Ä–µ–ª—è —Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ - –¥–∞—Ç–∞ –ø–æ–ª—ë—Ç–∞'\n"
            f"‚úÖ '–í–æ—Å—Ç–æ–∫ –æ–¥–∏–Ω - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è'\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?'\n"
            f"‚úÖ '–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑ - –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–≤–µ—Ç–∞ –≤ —ç–Ω–µ—Ä–≥–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏'\n"
            f"‚úÖ '–•–ª–æ—Ä–æ—Ñ–∏–ª–ª - –∑–µ–ª—ë–Ω—ã–π –ø–∏–≥–º–µ–Ω—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑'\n"
            f"‚úÖ '–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ –∏ –≤–æ–¥–∞ - –∏—Å—Ö–æ–¥–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑–∞'\n\n"
            f"–§–û–†–ú–ê–¢: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3\n"
            f"–í–°–ï –¶–ò–§–†–´ –ü–†–û–ü–ò–°–¨–Æ! –û–¢–í–ï–¢ –ü–ï–†–í–´–ú! –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!"
        )
        
        if system_prompt is None:
            system_prompt = (
                "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∑–∏—Å–æ–≤ –¥–ª—è —É—Å—Ç–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤. "
                "–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:\n"
                " 0. ‚ö†Ô∏è –§–ò–õ–¨–¢–†: –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê —Ç–æ–ª—å–∫–æ –¥–ª—è –Ø–í–ù–´–• –Ω–µ-–≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                "    ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–π (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞):\n"
                "    ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º–µ: '–ø–∏—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å', '–≥–æ–≤–æ—Ä–∏ –≥—Ä–æ–º—á–µ', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å', '–ø–∏—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é', '–≥–æ–≤–æ—Ä–∏ –±—ã—Å—Ç—Ä–µ–µ', '–≥–æ–≤–æ—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ'\n"
                "    ‚Ä¢ –ß–∏—Å—Ç—ã–π –±—ã—Ç–æ–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä: '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–∫–∞', '–ø—Ä–∏–≤–µ—Ç', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è'\n"
                "    ‚úÖ –û—Ç–≤–µ—á–∞–π –Ω–∞ –í–°–Å –æ—Å—Ç–∞–ª—å–Ω–æ–µ (–≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—å–±—ã, –º–∞—Ç–µ–º–∞—Ç–∏–∫—É)\n"
                " 1. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ï–ó–ò–°–ê - –û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú –°–õ–û–í–û–ú:\n"
                "    - –ö–¢–û? ‚Üí –ò–ú–Ø –ø–µ—Ä–≤—ã–º: '–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω - –ø–µ—Ä–≤—ã–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç'\n"
                "    - –ö–û–ì–î–ê? ‚Üí –î–ê–¢–ê –ø–µ—Ä–≤–æ–π: '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –∞–ø—Ä–µ–ª—è —Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ - –ø–æ–ª—ë—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞'\n"
                "    - –ß–¢–û? ‚Üí –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û –ø–µ—Ä–≤—ã–º: '–ö–µ—Ä–∞—Ç–∏–Ω - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å'\n"
                "    - –ì–î–ï? ‚Üí –ú–ï–°–¢–û –ø–µ—Ä–≤—ã–º: '–ü–∞—Ä–∏–∂ - –º–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≠–π—Ñ–µ–ª–µ–≤–æ–π –±–∞—à–Ω–∏'\n"
                "    - –°–ö–û–õ–¨–ö–û? ‚Üí –ß–ò–°–õ–û –ø–µ—Ä–≤—ã–º: '–î–≤–µ—Å—Ç–∏ –¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å - –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ'\n"
                "    - ‚ùå –ù–ï –ü–ò–®–ò: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å - –∫–µ—Ä–∞—Ç–∏–Ω' (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)\n"
                "    - ‚úÖ –ü–ò–®–ò: '–ö–µ—Ä–∞—Ç–∏–Ω - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å' (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)\n"
                " 2. –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å - –ü–û–õ–ù–û–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (5-15 —Å–ª–æ–≤): –û–¢–í–ï–¢ - –ü–û–Ø–°–ù–ï–ù–ò–ï\n"
                " 3. –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –±–µ–∑ –≤–æ–¥—ã\n"
                " 4. –í–°–ï –¶–ò–§–†–´ –ü–†–û–ü–ò–°–¨–Æ: '1961'‚Üí'—Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤—ã–π'\n"
                " 5. –§–û–†–ú–ê–¢: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3\n"
            )
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
            )
            
            text = response.choices[0].message.content or ""
            text = text.strip()
            
            # –ü–∞—Ä—Å–∏–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é |||
            if "|||" in text:
                theses = [t.strip() for t in text.split("|||") if t.strip()]
                return theses[:n]
            
            # Fallback: –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            lines = [ln.strip("-‚Ä¢* \t") for ln in text.splitlines()]
            theses = [ln for ln in lines if ln]
            return theses[:n]
            
        except Exception as e:
            logger.error(f"Cerebras theses generation error: {e}")
            return []
    
    def generate_answer(
        self,
        question: str,
        system_prompt: Optional[str] = None,
        history: Optional[List[tuple[str, str]]] = None,
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Cerebras
        
        Returns:
            str: –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        """
        if not question or not question.strip():
            return ""
        
        if system_prompt is None:
            system_prompt = (
                "‚ö†Ô∏è –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –§–ê–ö–¢–ê–ú–ò! –ù–ï –æ—Ç–≤–µ—á–∞–π –º–Ω–µ–Ω–∏—è–º–∏, —Å–æ–≤–µ—Ç–∞–º–∏, –æ—Ç–∫–∞–∑–∞–º–∏. "
                "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:\n"
                "1) –°–Ω–∞—á–∞–ª–∞ –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç (–¥–∞—Ç–∞/–∏–º—è/—á–∏—Å–ª–æ/–º–µ—Å—Ç–æ) - –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                "2) –ó–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) - –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
                "‚ö†Ô∏è –í–°–ï –¶–ò–§–†–´ –ò –ì–û–î–´ –ü–ò–®–ò –ü–†–û–ü–ò–°–¨–Æ! "
                "–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—Ç–µ. "
                "–ù–∞—á–∏–Ω–∞–π –°–†–ê–ó–£ —Å —Ñ–∞–∫—Ç–∞: –≥–æ–¥–∞, –∏–º–µ–Ω–∏, –º–µ—Å—Ç–∞. "
                "–í—Å–µ —á–∏—Å–ª–∞ –ü–†–û–ü–ò–°–¨–Æ (–Ω–µ —Ü–∏—Ñ—Ä–∞–º–∏). "
                "–ù–∏–∫–∞–∫–æ–π –ª–∞—Ç–∏–Ω–∏—Ü—ã - —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è."
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        messages = [{"role": "system", "content": system_prompt}]
        
        if history:
            for role, text in history[-8:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 –ø–∞—Ä
                openai_role = "assistant" if role == "model" else "user"
                messages.append({"role": openai_role, "content": text})
        
        messages.append({"role": "user", "content": question.strip()})
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=messages,
                max_tokens=self.max_tokens,
                temperature=self.temperature,
            )
            
            text = response.choices[0].message.content or ""
            return text.strip()
            
        except Exception as e:
            logger.error(f"Cerebras answer generation error: {e}")
            return ""


__all__ = ["CerebrasLLM", "CEREBRAS_AVAILABLE"]
