#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
import sys
import soundfile as sf
import numpy as np
from pathlib import Path
from loguru import logger

logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

from asr_transcriber import FasterWhisperTranscriber

AUDIO_DIR = Path("test_audio")

logger.info("=" * 80)
logger.info("–ü–†–û–í–ï–†–ö–ê –ó–ê–ü–ò–°–ê–ù–ù–´–• –§–ê–ô–õ–û–í")
logger.info("=" * 80)
logger.info("")

# –ó–∞–≥—Ä—É–∂–∞–µ–º ASR —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º ASR (lang=ru)...")
asr = FasterWhisperTranscriber(model_size="large-v3-turbo", device="cpu", compute_type="int8", language="ru")
logger.info("")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
for filename in ["question.wav", "answer.wav", "question2.wav"]:
    path = AUDIO_DIR / filename
    
    if not path.exists():
        logger.error(f"‚ùå {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        continue
    
    logger.info(f"üìÅ {filename}")
    logger.info("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º
    audio, sr = sf.read(path, dtype='float32')
    
    # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ
    if len(audio.shape) > 1:
        audio = audio[:, 0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    duration = len(audio) / sr
    max_amp = np.abs(audio).max()
    rms = np.sqrt(np.mean(audio ** 2))
    
    logger.info(f"  –î–ª–∏–Ω–∞: {duration:.2f}—Å")
    logger.info(f"  Sample rate: {sr}Hz")
    logger.info(f"  Max –∞–º–ø–ª–∏—Ç—É–¥–∞: {max_amp:.4f}")
    logger.info(f"  RMS (—Å—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å): {rms:.4f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—à–∏–Ω—É
    if max_amp < 0.001:
        logger.error("  ‚ùå –¢–ò–®–ò–ù–ê! –ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å")
    elif max_amp < 0.01:
        logger.warning("  ‚ö†Ô∏è  –û—á–µ–Ω—å —Ç–∏—Ö–æ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å—Å—è)")
    else:
        logger.info("  ‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å OK")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    logger.info("  üé§ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ ASR...")
    
    # –†–µ—Å–µ–º–ø–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if sr != 16000:
        from scipy import signal
        audio = signal.resample(audio, int(len(audio) * 16000 / sr))
        audio = audio.astype(np.float32)
    
    text = asr.transcribe_np(audio)
    
    if text:
        logger.success(f"  ‚úÖ ASR: '{text}'")
    else:
        logger.error("  ‚ùå ASR –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)")
        logger.error("     –≠—Ç–æ –∑–Ω–∞—á–∏—Ç:")
        logger.error("     - –í —Ñ–∞–π–ª–µ —Ç–æ–ª—å–∫–æ —à—É–º/—Ç–∏—à–∏–Ω–∞")
        logger.error("     - –ò–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
    
    logger.info("")

logger.info("=" * 80)
logger.info("–ò–¢–û–ì–ò")
logger.info("=" * 80)
logger.info("")
logger.info("–ï—Å–ª–∏ ASR –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª:")
logger.info("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∑–∞–ø–∏—Å—å: .venv/bin/python record_test_audio.py")
logger.info("  2. –ì–†–û–ú–ö–û –≥–æ–≤–æ—Ä–∏ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω")
logger.info("  3. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
logger.info("")
logger.info("–ï—Å–ª–∏ ASR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–µ–∫—Å—Ç:")
logger.info("  ‚úÖ –ó–∞–ø–∏—Å–∏ OK! –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å")
