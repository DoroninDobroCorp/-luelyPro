#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –í–æ–ø—Ä–æ—Å ‚Üí LLM –æ—Ç–≤–µ—á–∞–µ—Ç ‚Üí –¢–µ–∑–∏—Å —Å–æ–∑–¥–∞—ë—Ç—Å—è
2. –ü–æ–≤—Ç–æ—Ä —Ç–µ–∑–∏—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
3. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¢–µ–∑–∏—Å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
4. –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞—ë—Ç—Å—è
5. –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
"""
import os
import sys
import time
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss.SSS}</green> | <level>{level:8}</level> | {message}")

# –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["THESIS_REPEAT_SEC"] = "3"
os.environ["FILE_LOG_LEVEL"] = "INFO"
os.environ["CONSOLE_LOG_LEVEL"] = "INFO"

from live_recognizer import LiveVoiceVerifier


def test_full_exam_cycle():
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫–∑–∞–º–µ–Ω–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
    
    logger.info("=" * 80)
    logger.info("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —ç–∫–∑–∞–º–µ–Ω–∞")
    logger.info("=" * 80)
    
    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    announce_count = 0
    closed_count = 0
    theses_history = []
    
    def mock_speak(text):
        nonlocal announce_count
        announce_count += 1
        logger.info(f"üîä –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{announce_count}: {text[:50]}...")
    
    # –°–æ–∑–¥–∞—ë–º verifier —Å LLM –Ω–æ –ë–ï–ó ASR (–∏—Å–ø–æ–ª—å–∑—É–µ–º simulate_dialogue)
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    verifier = LiveVoiceVerifier(
        asr_enable=False,  # –û—Ç–∫–ª—é—á–∞–µ–º ASR - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é
        llm_enable=True,   # –í–∫–ª—é—á–∞–µ–º LLM –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        theses_path=None,
        thesis_autogen_enable=True,
        thesis_match_threshold=0.3,  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 30%
    )
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º _speak_text
    verifier._speak_text = mock_speak
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
    verifier._start_segment_worker()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π _handle_self_transcript –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏–π
    original_handle = verifier._handle_self_transcript
    
    def tracked_handle(transcript):
        nonlocal closed_count
        result = original_handle(transcript)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç
        if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
            closed_count += 1
            logger.success(f"‚úÖ –¢–µ–∑–∏—Å #{closed_count} –∑–∞–∫—Ä—ã—Ç!")
        return result
    
    verifier._handle_self_transcript = tracked_handle
    
    try:
        # ================== –†–ê–£–ù–î 1 ==================
        logger.info("")
        logger.info("=" * 80)
        logger.info("–†–ê–£–ù–î 1: –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        logger.info("=" * 80)
        
        # 1. –í–æ–ø—Ä–æ—Å —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞
        question1 = "–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ –≤ –°–®–ê?"
        logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å: {question1}")
        verifier.simulate_dialogue([("other", question1)])
        
        # –ñ–¥—ë–º LLM –æ—Ç–≤–µ—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∑–∏—Å–∞
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω
        if verifier.thesis_prompter is None:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞!")
            return False
        
        thesis1 = verifier.thesis_prompter.current_text()
        logger.success(f"‚úÖ –¢–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis1[:50]}...")
        theses_history.append(thesis1)
        announce_count_before = announce_count
        
        # 2. –ñ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (6 —Å–µ–∫ = 2 –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 3 —Å–µ–∫)
        logger.info("")
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 6 —Å–µ–∫—É–Ω–¥ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–∞)...")
        time.sleep(6)
        
        repeats = announce_count - announce_count_before
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–æ–≤: {repeats}")
        
        if repeats < 2:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ú–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤! –û–∂–∏–¥–∞–ª–æ—Å—å ‚â•2, –ø–æ–ª—É—á–µ–Ω–æ {repeats}")
            return False
        
        logger.success(f"‚úÖ –ü–æ–≤—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ({repeats} —Ä–∞–∑)")
        
        # 3. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∑–∏—Å
        logger.info("")
        logger.info("üí¨ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∑–∏—Å...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∑–∏—Å–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç (—á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–ª–æ)
        answer1 = thesis1.split('.')[0]  # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        logger.info(f"üìù –ú–û–ô –û–¢–í–ï–¢: {answer1}")
        verifier.simulate_dialogue([("self", answer1)])
        
        # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç
        if closed_count < 1:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞!")
            logger.error(f"   –û—Ç–≤–µ—Ç: '{answer1}'")
            logger.error(f"   –¢–µ–∑–∏—Å: '{thesis1}'")
            return False
        
        logger.success("‚úÖ –¢–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞!")
        
        # ================== –†–ê–£–ù–î 2 ==================
        logger.info("")
        logger.info("=" * 80)
        logger.info("–†–ê–£–ù–î 2: –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞)")
        logger.info("=" * 80)
        
        # 4. –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞
        question2 = "–ö—Ç–æ –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã —Ä–∞–±—Å—Ç–≤–∞?"
        logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å: {question2}")
        verifier.simulate_dialogue([("other", question2)])
        
        # –ñ–¥—ë–º LLM –æ—Ç–≤–µ—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∑–∏—Å–∞
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω –ù–û–í–´–ô —Ç–µ–∑–∏—Å
        if verifier.thesis_prompter is None:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω!")
            return False
        
        thesis2 = verifier.thesis_prompter.current_text()
        
        if thesis2 == thesis1:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)!")
            return False
        
        logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis2[:50]}...")
        theses_history.append(thesis2)
        
        # 5. –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ —Ç–µ–∑–∏—Å–∞
        logger.info("")
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º 4 —Å–µ–∫—É–Ω–¥—ã (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –ø–æ–≤—Ç–æ—Ä)...")
        announce_count_before = announce_count
        time.sleep(4)
        
        repeats2 = announce_count - announce_count_before
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ç–µ–∑–∏—Å–∞: {repeats2}")
        
        if repeats2 < 1:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è!")
            return False
        
        logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ({repeats2} —Ä–∞–∑)")
        
        # 6. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å
        logger.info("")
        logger.info("üí¨ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∑–∏—Å–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç
        answer2 = thesis2.split('.')[0]
        logger.info(f"üìù –ú–û–ô –û–¢–í–ï–¢: {answer2}")
        verifier.simulate_dialogue([("self", answer2)])
        
        # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç
        if closed_count < 2:
            logger.error("‚ùå –û–®–ò–ë–ö–ê: –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã—Ç!")
            return False
        
        logger.success("‚úÖ –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç!")
        
        # ================== –ò–¢–û–ì–ò ==================
        logger.info("")
        logger.info("=" * 80)
        logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
        logger.info("=" * 80)
        logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {announce_count}")
        logger.info(f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–µ–∑–∏—Å–æ–≤: {closed_count}")
        logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤: {len(set(theses_history))}")
        
        logger.info("")
        logger.info("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–∑–∏—Å–æ–≤:")
        for i, t in enumerate(theses_history, 1):
            logger.info(f"  {i}. {t[:60]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        logger.info("")
        checks = [
            (announce_count >= 5, f"–û–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (‚â•5): {announce_count}"),
            (closed_count >= 2, f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–µ–∑–∏—Å–æ–≤ (‚â•2): {closed_count}"),
            (len(set(theses_history)) >= 2, f"–†–∞–∑–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤ (‚â•2): {len(set(theses_history))}"),
        ]
        
        all_passed = True
        for passed, msg in checks:
            if passed:
                logger.success(f"‚úÖ {msg}")
            else:
                logger.error(f"‚ùå {msg}")
                all_passed = False
        
        if all_passed:
            logger.info("")
            logger.success("=" * 80)
            logger.success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            logger.success("=" * 80)
            return True
        else:
            logger.error("")
            logger.error("=" * 80)
            logger.error("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
            logger.error("=" * 80)
            return False
            
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        verifier._stop_segment_worker()


def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–∫–∑–∞–º–µ–Ω–∞")
    logger.info("")
    
    try:
        result = test_full_exam_cycle()
        sys.exit(0 if result else 1)
    except Exception as e:
        logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
