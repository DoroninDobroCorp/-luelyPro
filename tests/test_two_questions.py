#!/usr/bin/env python3
"""
–¢–ï–°–¢: –í–æ–ø—Ä–æ—Å - –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ç–µ–∑–∏—Å–æ–≤ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ.
"""
import os
import sys
import time
import numpy as np
import soundfile as sf
from pathlib import Path
from loguru import logger

os.environ["THESIS_REPEAT_SEC"] = "5"
os.environ["FILE_LOG_LEVEL"] = "DEBUG"
os.environ["CONSOLE_LOG_LEVEL"] = "INFO"

logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

from live_recognizer import LiveVoiceVerifier, VoiceProfile

AUDIO_DIR = Path("test_audio")

logger.info("=" * 80)
logger.info("–¢–ï–°–¢: –í–æ–ø—Ä–æ—Å - –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç")
logger.info("=" * 80)
logger.info("")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å
required_files = ["question.wav", "question2.wav", "answer.wav"]
missing = []
for f in required_files:
    path = AUDIO_DIR / f
    if not path.exists():
        missing.append(f)

if missing:
    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {missing}")
    logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏: tests/record_test_audio.py")
    sys.exit(1)

logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏:")
for f in required_files:
    info = sf.info(AUDIO_DIR / f)
    logger.info(f"   {f}: {info.duration:.1f}—Å")
logger.info("")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
def load_audio(filename: str) -> np.ndarray:
    audio, sr = sf.read(AUDIO_DIR / filename, dtype='float32')
    if len(audio.shape) > 1:
        audio = audio[:, 0]
    if sr != 16000:
        from scipy import signal
        audio = signal.resample(audio, int(len(audio) * 16000 / sr))
    max_amp = np.abs(audio).max()
    if max_amp > 0 and max_amp < 0.1:
        gain = 0.5 / max_amp
        audio = audio * gain
    return audio.astype(np.float32)

question1_audio = load_audio("question.wav")  # –ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ
question2_audio = load_audio("question2.wav")  # –ü–µ—Ä–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞ –≤ –∫–æ—Å–º–æ—Å–µ
answer_audio = load_audio("answer.wav")  # –û—Ç–≤–µ—Ç –ø—Ä–æ –ì–∞–≥–∞—Ä–∏–Ω–∞

logger.info("–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
logger.info("")

# –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")

verifier = LiveVoiceVerifier(
    asr_enable=True,
    asr_language="ru",
    llm_enable=True,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
profiles = list(Path("profiles").glob("*.npz"))
voice_profile = None
if profiles:
    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profiles[0].name}")
    voice_profile = VoiceProfile.load(profiles[0])
    if voice_profile is None:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {profiles[0]}")
        sys.exit(1)
else:
    logger.warning("‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    sys.exit(1)

logger.info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
logger.info("")

# –°—á—ë—Ç—á–∏–∫–∏
theses_created = 0
theses_closed = 0
announces = 0
announced_theses = {}  # {—Ç–µ–∑–∏—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ–±—ä—è–≤–ª–µ–Ω–∏–π}

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
_original_announce = verifier._announce_thesis

def tracked_announce(thesis_index=None):
    global announces
    announces += 1
    if verifier.thesis_prompter:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω
        if thesis_index is not None:
            theses = getattr(verifier.thesis_prompter, "theses", [])
            if 0 <= thesis_index < len(theses):
                text = theses[thesis_index]
            else:
                text = None
        else:
            text = verifier.thesis_prompter.current_text()
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫–æ–π —Ç–µ–∑–∏—Å –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è
        if text:
            announced_theses[text] = announced_theses.get(text, 0) + 1
            logger.info(f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{announces}: {text[:60]}... (—Ä–∞–∑ {announced_theses[text]})")
    _original_announce(thesis_index=thesis_index)

verifier._announce_thesis = tracked_announce

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –∞—É–¥–∏–æ
def inject_audio_via_asr(audio: np.ndarray, label: str, is_self: bool):
    logger.info(f"üéôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {label}: {len(audio)/16000:.1f}—Å")
    if not verifier._asr:
        logger.error("‚ùå ASR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    text = verifier._asr.transcribe_np(audio)
    logger.info(f"   ASR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: '{text}'")
    kind = "self" if is_self else "other"
    verifier.simulate_dialogue([(kind, text)])
    logger.info(f"   ‚úÖ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–Ω")
    time.sleep(0.5)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
verifier._start_segment_worker()

try:
    # ========== –†–ê–£–ù–î 1: –ü–ï–†–í–´–ô –í–û–ü–†–û–° ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 1: –ü–ï–†–í–´–ô –í–û–ü–†–û–° (–ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ—Å–º–æ—Å–µ)")
    logger.info("=" * 80)
    
    inject_audio_via_asr(question1_audio, "–í–û–ü–†–û–° #1", is_self=False)
    
    logger.info("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫ (LLM –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∑–∏—Å)...")
    time.sleep(5)
    
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å #1 –ù–ï —Å–æ–∑–¥–∞–Ω!")
        sys.exit(1)
    
    thesis1 = verifier.thesis_prompter.current_text()
    logger.success(f"‚úÖ –¢–µ–∑–∏—Å #1 —Å–æ–∑–¥–∞–Ω: {thesis1[:70]}...")
    theses_created += 1
    
    # ========== –†–ê–£–ù–î 2: –í–¢–û–†–û–ô –í–û–ü–†–û–° ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 2: –í–¢–û–†–û–ô –í–û–ü–†–û–° (–ü–µ—Ä–≤–∞—è –∂–µ–Ω—â–∏–Ω–∞ –≤ –∫–æ—Å–º–æ—Å–µ)")
    logger.info("=" * 80)
    
    inject_audio_via_asr(question2_audio, "–í–û–ü–†–û–° #2", is_self=False)
    
    logger.info("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫ (LLM –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å)...")
    time.sleep(5)
    
    if verifier.thesis_prompter is None:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: ThesisPrompter –ø–æ—Ç–µ—Ä—è–Ω!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å 2 —Ç–µ–∑–∏—Å–∞
    total_theses = len(verifier.thesis_prompter.theses)
    if total_theses < 2:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 2 —Ç–µ–∑–∏—Å–∞, –µ—Å—Ç—å {total_theses}")
        logger.error(f"   –¢–µ–∑–∏—Å—ã: {verifier.thesis_prompter.theses}")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ù–∞–∫–æ–ø–ª–µ–Ω–æ {total_theses} —Ç–µ–∑–∏—Å–æ–≤")
    for i, t in enumerate(verifier.thesis_prompter.theses, 1):
        logger.info(f"   {i}) {t[:60]}...")
    theses_created = total_theses
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Ç–µ–∑–∏—Å –≤—Å—ë –µ—â—ë –ø–µ—Ä–≤—ã–π
    current_thesis = verifier.thesis_prompter.current_text()
    if current_thesis != thesis1:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∫—É—â–∏–π —Ç–µ–∑–∏—Å —Å–º–µ–Ω–∏–ª—Å—è!")
        logger.error(f"   –ë—ã–ª–æ: {thesis1[:40]}...")
        logger.error(f"   –°—Ç–∞–ª–æ: {current_thesis[:40]}...")
        sys.exit(1)
    
    logger.info("‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∑–∏—Å–∞)...")
    time.sleep(2)
    
    # ========== –†–ê–£–ù–î 3: –û–¢–í–ï–¢ –ù–ê –ü–ï–†–í–´–ô –í–û–ü–†–û–° ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 3: –û–¢–í–ï–¢ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å (–ø—Ä–æ –ì–∞–≥–∞—Ä–∏–Ω–∞)")
    logger.info("=" * 80)
    
    inject_audio_via_asr(answer_audio, "–û–¢–í–ï–¢", is_self=True)
    
    logger.info("‚è≥ –ñ–¥—ë–º 3 —Å–µ–∫ (–ø–µ—Ä–≤—ã–π —Ç–µ–∑–∏—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å—Å—è, –≤—Ç–æ—Ä–æ–π –æ—Å—Ç–∞—Ç—å—Å—è)...")
    time.sleep(3)
    
    if verifier.thesis_prompter is None:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: ThesisPrompter –ø–æ—Ç–µ—Ä—è–Ω!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã–ª—Å—è
    current_thesis_now = verifier.thesis_prompter.current_text()
    
    if current_thesis_now == thesis1:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã–ª—Å—è!")
        logger.error(f"   –¢–µ–∑–∏—Å: {thesis1[:60]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        if hasattr(verifier.thesis_prompter, '_dialogue_context'):
            logger.error(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞: {verifier.thesis_prompter._dialogue_context}")
        
        sys.exit(1)
    
    logger.success("‚úÖ –ü–µ—Ä–≤—ã–π —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç!")
    theses_closed += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –∞–∫—Ç–∏–≤–µ–Ω
    if not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –ø—Ä–æ–ø–∞–ª!")
        sys.exit(1)
    
    thesis2_text = verifier.thesis_prompter.current_text()
    logger.success(f"‚úÖ –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –∞–∫—Ç–∏–≤–µ–Ω: {thesis2_text[:70]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å
    if verifier.thesis_prompter._index != 1:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ò–Ω–¥–µ–∫—Å —Ç–µ–∑–∏—Å–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {verifier.thesis_prompter._index}, –æ–∂–∏–¥–∞–ª—Å—è 1")
        sys.exit(1)
    
    # ========== –ò–¢–û–ì–ò ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
    logger.info("=" * 80)
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {theses_created}")
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ: {theses_closed}")
    logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {announces}")
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ —Ç–µ–∑–∏—Å–∞ –æ–±—ä—è–≤–ª—è–ª–∏—Å—å
    logger.info("–û–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∑–∏—Å—ã:")
    for thesis_text, count in announced_theses.items():
        logger.info(f"  - {thesis_text[:50]}... : {count} —Ä–∞–∑")
    
    if len(announced_theses) < 2:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –û–±—ä—è–≤–ª—è–ª—Å—è —Ç–æ–ª—å–∫–æ {len(announced_theses)} —Ç–µ–∑–∏—Å –∏–∑ 2!")
        logger.error("   –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –Ω–µ –±—ã–ª –ø—Ä–æ–≥–æ–≤–æ—Ä–µ–Ω")
        sys.exit(1)
    
    logger.success("‚úÖ –û–±–∞ —Ç–µ–∑–∏—Å–∞ –±—ã–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã")
    logger.info("")
    
    if theses_created >= 2 and theses_closed >= 1:
        logger.success("=" * 80)
        logger.success("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.success("=" * 80)
        logger.success("")
        logger.success("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        logger.success("  ‚úÖ –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç —Ç–µ–∑–∏—Å—ã –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        logger.success("  ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∑–∏—Å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ")
        logger.success("  ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∑–∏—Å—ã –∞–∫—Ç–∏–≤–Ω—ã–º–∏")
        logger.success("")
        sys.exit(0)
    else:
        logger.error("")
        logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        sys.exit(1)

except KeyboardInterrupt:
    logger.warning("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    sys.exit(130)

except Exception as e:
    logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)

finally:
    verifier._stop_segment_worker()
