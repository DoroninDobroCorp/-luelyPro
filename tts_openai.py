"""
OpenAI Text-to-Speech –º–æ–¥—É–ª—å
‚ö° –ë–´–°–¢–†–û: 0.5-1 —Å–µ–∫ (–≤ 3-5 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ Silero)
üé§ –ö–ê–ß–ï–°–¢–í–û: –û—Ç–ª–∏—á–Ω–æ–µ (–ø–æ—á—Ç–∏ –∫–∞–∫ Google TTS)
üí∞ –¶–ï–ù–ê: ~$0.0015 –∑–∞ —Ç–µ–∑–∏—Å
"""
from __future__ import annotations

import io
import os
from typing import Optional

import numpy as np
from loguru import logger

try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    logger.warning("openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")


class OpenAITTS:
    """
    OpenAI Text-to-Speech wrapper
    
    –¢—Ä–µ–±—É–µ—Ç:
    1. pip install openai
    2. OPENAI_API_KEY –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    –ì–æ–ª–æ—Å–∞:
    - alloy:   –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    - echo:    –º—É–∂—Å–∫–æ–π
    - fable:   –±—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –∞–∫—Ü–µ–Ω—Ç
    - onyx:    –≥–ª—É–±–æ–∫–∏–π –º—É–∂—Å–∫–æ–π ‚≠ê –†–ï–ö–û–ú–ï–ù–î–£–Æ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
    - nova:    –∂–µ–Ω—Å–∫–∏–π
    - shimmer: –∂–µ–Ω—Å–∫–∏–π, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π
    
    –ú–æ–¥–µ–ª–∏:
    - tts-1:     –±—ã—Å—Ç—Ä–∞—è (300-500–º—Å), —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    - tts-1-hd:  –º–µ–¥–ª–µ–Ω–Ω–µ–µ (800-1200–º—Å), –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    –¶–µ–Ω–∞:
    - tts-1:    $15 / 1M —Å–∏–º–≤–æ–ª–æ–≤
    - tts-1-hd: $30 / 1M —Å–∏–º–≤–æ–ª–æ–≤
    """
    
    def __init__(
        self,
        api_key: Optional[str] = None,
        model: str = "tts-1",
        voice: str = "onyx",
        speed: float = 1.0,
    ):
        if not OPENAI_AVAILABLE:
            raise RuntimeError(
                "openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise RuntimeError(
                "OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! "
                "–î–æ–±–∞–≤—å—Ç–µ –≤ .env: OPENAI_API_KEY=your_key_here"
            )
        
        self.model = model
        self.voice = voice
        self.speed = speed
        self.sample_rate = 24000  # OpenAI TTS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 24kHz
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        try:
            self.client = OpenAI(api_key=self.api_key)
            logger.info(
                f"OpenAI TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: model={self.model}, "
                f"voice={self.voice}, speed={self.speed}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI TTS: {e}")
            raise
    
    def synth(self, text: str) -> np.ndarray:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ
        
        Returns:
            np.ndarray: float32 audio –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1], sample_rate=24000
        """
        if not text or not text.strip():
            return np.zeros((0,), dtype=np.float32)
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI TTS API
            response = self.client.audio.speech.create(
                model=self.model,
                voice=self.voice,
                input=text.strip(),
                speed=self.speed,
                response_format="opus",  # Opus - —Å–∂–∞—Ç—ã–π —Ñ–æ—Ä–º–∞—Ç (–±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ–¥–∞—á–∞)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∞—É–¥–∏–æ
            audio_bytes = response.content
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ numpy array
            audio_np = self._decode_audio(audio_bytes)
            
            logger.debug(
                f"–°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–æ {len(audio_np)} —Å—ç–º–ø–ª–æ–≤ "
                f"({len(audio_np)/self.sample_rate:.2f}—Å) –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}..."
            )
            
            return audio_np
            
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ OpenAI TTS: {e}")
            return np.zeros((0,), dtype=np.float32)
    
    def _decode_audio(self, audio_bytes: bytes) -> np.ndarray:
        """
        –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç opus/mp3 –≤ numpy array
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pydub (–µ—Å–ª–∏ –µ—Å—Ç—å)
            from pydub import AudioSegment
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio_segment = AudioSegment.from_file(
                io.BytesIO(audio_bytes),
                format="opus"
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            samples = np.array(audio_segment.get_array_of_samples(), dtype=np.float32)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ [-1, 1]
            samples = samples / 32768.0
            
            # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ ‚Üí –º–æ–Ω–æ
            if audio_segment.channels == 2:
                samples = samples.reshape((-1, 2)).mean(axis=1)
            
            return samples
            
        except ImportError:
            logger.warning(
                "pydub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–µ–∫–æ–¥–µ—Ä. "
                "–î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: pip install pydub ffmpeg-python"
            )
            return self._decode_audio_fallback(audio_bytes)
    
    def _decode_audio_fallback(self, audio_bytes: bytes) -> np.ndarray:
        """
        Fallback –¥–µ–∫–æ–¥–µ—Ä —á–µ—Ä–µ–∑ ffmpeg –Ω–∞–ø—Ä—è–º—É—é
        """
        import subprocess
        import tempfile
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".opus", delete=False) as tmp:
                tmp.write(audio_bytes)
                tmp_path = tmp.name
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
            result = subprocess.run(
                [
                    "ffmpeg",
                    "-i", tmp_path,
                    "-f", "f32le",
                    "-acodec", "pcm_f32le",
                    "-ar", str(self.sample_rate),
                    "-ac", "1",  # –º–æ–Ω–æ
                    "-"
                ],
                capture_output=True,
                check=True
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy
            audio_np = np.frombuffer(result.stdout, dtype=np.float32)
            return audio_np
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {e}")
            return np.zeros((0,), dtype=np.float32)


__all__ = ["OpenAITTS", "OPENAI_AVAILABLE"]
