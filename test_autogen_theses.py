#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∞.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–∑–∏—Å—ã —Å–æ–∑–¥–∞—é—Ç—Å—è ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä.
"""
import os
import sys
import time
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="DEBUG", format="<green>{time:HH:mm:ss.SSS}</green> | <level>{level:8}</level> | {message}")

# –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["THESIS_REPEAT_SEC"] = "2"
os.environ["FILE_LOG_LEVEL"] = "DEBUG"
os.environ["CONSOLE_LOG_LEVEL"] = "DEBUG"

from live_recognizer import LiveVoiceVerifier


def test_autogen_with_repeat():
    """–¢–µ—Å—Ç: –≤–æ–ø—Ä–æ—Å ‚Üí –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∑–∏—Å–æ–≤ ‚Üí –ø–æ–≤—Ç–æ—Ä"""
    logger.info("=" * 70)
    logger.info("–¢–ï–°–¢: –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∑–∏—Å–æ–≤ + –ø–æ–≤—Ç–æ—Ä")
    logger.info("=" * 70)
    
    announce_count = 0
    announce_times = []
    announced_texts = []
    
    def mock_speak(text):
        nonlocal announce_count
        announce_count += 1
        announce_times.append(time.time())
        announced_texts.append(text)
        logger.info(f"üîä –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{announce_count}: {text}")
    
    # –°–æ–∑–¥–∞—ë–º verifier –ë–ï–ó LLM —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∑–∏—Å–æ–≤
    verifier = LiveVoiceVerifier(
        asr_enable=False,
        llm_enable=False,  # ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º LLM —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        theses_path=None,  # –ù–µ –≥—Ä—É–∑–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
        thesis_autogen_enable=True,  # ‚úÖ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    )
    
    # –ü–æ–¥–º–µ–Ω—è–µ–º _speak_text
    verifier._speak_text = mock_speak
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
    verifier._start_segment_worker()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
    logger.info("")
    logger.info("üìù –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: '–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–ª–∏ Python?'")
    question = "–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–ª–∏ Python?"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    verifier._handle_foreign_text(question)
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Gemini
    logger.info("‚è≥ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∑–∏—Å–æ–≤ (1 —Å–µ–∫)...")
    time.sleep(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã
    if verifier.thesis_prompter is None:
        logger.error("‚ùå –¢–µ–∑–∏—Å—ã –ù–ï –°–û–ó–î–ê–ù–´!")
        logger.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("  1. AI_ONLY_THESIS=0 –∏ –∫–æ–¥ –Ω–µ –¥–æ—à–µ–ª –¥–æ _maybe_generate_theses")
        logger.error("  2. _question_context –ø—É—Å—Ç–æ–π")
        logger.error("  3. –û—à–∏–±–∫–∞ –≤ thesis_generator.generate()")
        verifier._stop_segment_worker()
        return False
    
    theses_count = len(verifier.thesis_prompter.theses)
    logger.success(f"‚úÖ –¢–µ–∑–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã: {theses_count} —à—Ç.")
    for i, t in enumerate(verifier.thesis_prompter.theses, 1):
        logger.info(f"  {i}. {t}")
    
    # –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä—ã
    test_duration = 6
    logger.info("")
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º {test_duration} —Å–µ–∫—É–Ω–¥ –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã...")
    
    start_time = time.time()
    while time.time() - start_time < test_duration:
        time.sleep(0.5)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
    verifier._stop_segment_worker()
    
    # –ê–Ω–∞–ª–∏–∑
    logger.info("")
    logger.info("=" * 70)
    logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    logger.info("=" * 70)
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {theses_count}")
    logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {announce_count}")
    logger.info(f"–û–∂–∏–¥–∞–ª–æ—Å—å: –º–∏–Ω–∏–º—É–º 3 (–ø–µ—Ä–≤–æ–µ + 2 –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞ 6 —Å–µ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫)")
    
    if len(announce_times) > 1:
        intervals = [announce_times[i] - announce_times[i-1] 
                    for i in range(1, len(announce_times))]
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: {[f'{x:.1f}—Å' for x in intervals]}")
    
    logger.info("")
    logger.info("–û–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∑–∏—Å—ã:")
    for i, text in enumerate(announced_texts, 1):
        logger.info(f"  {i}. {text}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    logger.info("")
    if theses_count > 0 and announce_count >= 3:
        logger.success("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.success("  ‚úì –¢–µ–∑–∏—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.success("  ‚úì –ü–æ–≤—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        logger.error(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        if theses_count == 0:
            logger.error("  ‚úó –¢–µ–∑–∏—Å—ã –ù–ï —Å–æ–∑–¥–∞–Ω—ã")
        if announce_count < 3:
            logger.error(f"  ‚úó –ü–æ–≤—Ç–æ—Ä –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç ({announce_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)")
        return False


def main():
    logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–æ–º")
    logger.info("")
    
    try:
        result = test_autogen_with_repeat()
        sys.exit(0 if result else 1)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
