#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CluelyPro.
–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ —à–∞–≥–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
"""
import os
import sys
import time
import numpy as np
from pathlib import Path
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

# –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ["THESIS_REPEAT_SEC"] = "5"
os.environ["FILE_LOG_LEVEL"] = "INFO"
os.environ["CONSOLE_LOG_LEVEL"] = "INFO"


def print_step(num, title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞"""
    logger.info("")
    logger.info("=" * 80)
    logger.info(f"–®–ê–ì {num}: {title}")
    logger.info("=" * 80)


def ask_continue():
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ª–∏"""
    logger.info("")
    try:
        response = input(">>> –ù–∞–∂–º–∏ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–∏–ª–∏ 'q' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏): ").strip()
        if response.lower() == 'q':
            logger.info("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            sys.exit(0)
    except KeyboardInterrupt:
        logger.info("\n–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        sys.exit(0)


def test_microphone():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    print_step(1, "–ü–†–û–í–ï–†–ö–ê –ú–ò–ö–†–û–§–û–ù–ê")
    
    logger.info("–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤–æ–æ–±—â–µ...")
    logger.info("")
    logger.info("üìã –ß—Ç–æ –±—É–¥–µ—Ç:")
    logger.info("  1. –ó–∞–ø–∏—à–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
    logger.info("  2. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ > 0")
    logger.info("")
    logger.info("‚úã –ü–†–ò–ì–û–¢–û–í–¨–°–Ø –ì–û–í–û–†–ò–¢–¨ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã!")
    
    ask_continue()
    
    try:
        import sounddevice as sd
        
        logger.info("‚è∫ –ì–û–í–û–†–ò –ß–¢–û-–ù–ò–ë–£–î–¨ –°–ï–ô–ß–ê–°! (3 —Å–µ–∫—É–Ω–¥—ã)")
        audio = sd.rec(int(3 * 16000), samplerate=16000, channels=1, dtype='float32')
        sd.wait()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        rms = np.sqrt(np.mean(audio**2))
        max_amp = np.max(np.abs(audio))
        
        logger.info("")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        logger.info(f"  RMS —É—Ä–æ–≤–µ–Ω—å: {rms:.6f}")
        logger.info(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: {max_amp:.6f}")
        
        if max_amp < 0.001:
            logger.error("‚ùå –ú–ò–ö–†–û–§–û–ù –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
            logger.error("   –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π.")
            logger.error("")
            logger.error("üîß –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
            logger.error("   1. –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω?")
            logger.error("   2. –í –°–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚Üí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ú–∏–∫—Ä–æ—Ñ–æ–Ω")
            logger.error("   3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–±—Ä–∞–Ω –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?")
            return False
        
        logger.success("‚úÖ –ú–ò–ö–†–û–§–û–ù –†–ê–ë–û–¢–ê–ï–¢!")
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π: {max_amp:.4f}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
        return False


def test_vad():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ VAD (–¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å–∞)"""
    print_step(2, "–ü–†–û–í–ï–†–ö–ê VAD (–î–ï–¢–ï–ö–¢–û–† –†–ï–ß–ò)")
    
    logger.info("–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—á—å...")
    logger.info("")
    logger.info("üìã –ß—Ç–æ –±—É–¥–µ—Ç:")
    logger.info("  1. –ó–∞–ø–∏—à–µ–º 5 —Å–µ–∫—É–Ω–¥ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞")
    logger.info("  2. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ —Ñ—Ä–µ–π–º–æ–≤ VAD —Å—á–∏—Ç–∞–µ—Ç —Ä–µ—á—å—é")
    logger.info("")
    logger.info("‚úã –ü–†–ò–ì–û–¢–û–í–¨–°–Ø –ì–û–í–û–†–ò–¢–¨!")
    
    ask_continue()
    
    try:
        import sounddevice as sd
        import webrtcvad
        
        vad = webrtcvad.Vad(2)  # –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å 2
        
        logger.info("‚è∫ –ì–û–í–û–†–ò –†–ê–ó–ù–´–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø! (5 —Å–µ–∫—É–Ω–¥)")
        logger.info("   –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ? –ö—Ç–æ –∏–∑–æ–±—Ä—ë–ª –∫–æ–º–ø—å—é—Ç–µ—Ä?'")
        
        audio = sd.rec(int(5 * 16000), samplerate=16000, channels=1, dtype='int16')
        sd.wait()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VAD
        frame_duration = 20  # –º—Å
        frame_size = int(16000 * frame_duration / 1000)
        num_frames = len(audio) // frame_size
        
        speech_frames = 0
        for i in range(num_frames):
            start = i * frame_size
            end = start + frame_size
            frame = audio[start:end].tobytes()
            
            try:
                if vad.is_speech(frame, 16000):
                    speech_frames += 1
            except:
                pass
        
        speech_percent = (speech_frames / num_frames) * 100 if num_frames > 0 else 0
        
        logger.info("")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        logger.info(f"  –í—Å–µ–≥–æ —Ñ—Ä–µ–π–º–æ–≤: {num_frames}")
        logger.info(f"  –§—Ä–µ–π–º–æ–≤ —Å —Ä–µ—á—å—é: {speech_frames}")
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—á–∏: {speech_percent:.1f}%")
        
        if speech_frames < 10:
            logger.error("‚ùå VAD –ù–ï –î–ï–¢–ï–ö–¢–ò–†–£–ï–¢ –†–ï–ß–¨!")
            logger.error("   –ü–æ—á—Ç–∏ –≤—Å–µ —Ñ—Ä–µ–π–º—ã —Å—á–∏—Ç–∞—é—Ç—Å—è —Ç–∏—à–∏–Ω–æ–π.")
            logger.error("")
            logger.error("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.error("   1. –ì–æ–≤–æ—Ä–∏—à—å —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ")
            logger.error("   2. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞")
            logger.error("   3. –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–∞–ª–µ–∫–æ")
            return False
        
        logger.success(f"‚úÖ VAD –†–ê–ë–û–¢–ê–ï–¢!")
        logger.info(f"   –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ {speech_frames} —Ñ—Ä–µ–π–º–æ–≤ —Å —Ä–µ—á—å—é ({speech_percent:.1f}%)")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ VAD: {e}")
        return False


def test_asr():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ ASR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏)"""
    print_step(3, "–ü–†–û–í–ï–†–ö–ê ASR (–†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –†–ï–ß–ò)")
    
    logger.info("–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –ª–∏ ASR —Ç–≤–æ—é —Ä–µ—á—å...")
    logger.info("")
    logger.info("üìã –ß—Ç–æ –±—É–¥–µ—Ç:")
    logger.info("  1. –ó–∞–ø–∏—à–µ–º 5 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ")
    logger.info("  2. –ü—Ä–æ–≥–æ–Ω–∏–º —á–µ—Ä–µ–∑ faster-whisper")
    logger.info("  3. –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª")
    logger.info("")
    logger.info("‚úã –ü–†–ò–ì–û–¢–û–í–¨–°–Ø –ì–û–í–û–†–ò–¢–¨ –ß–Å–¢–ö–û!")
    
    ask_continue()
    
    try:
        import sounddevice as sd
        from asr_transcriber import FasterWhisperTranscriber
        
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å ASR (tiny)...")
        asr = FasterWhisperTranscriber(
            model_size="tiny",
            device="cpu",
            compute_type="int8",
            language="ru"
        )
        
        logger.info("‚è∫ –ü–†–û–ò–ó–ù–ï–°–ò: '–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ –≤ –°–®–ê?' (5 —Å–µ–∫—É–Ω–¥)")
        audio = sd.rec(int(5 * 16000), samplerate=16000, channels=1, dtype='float32')
        sd.wait()
        
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º
        logger.info("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞—é...")
        text = asr.transcribe_np(audio.flatten(), 16000)
        
        logger.info("")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        logger.info(f"  –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{text}'")
        
        if not text or len(text.strip()) < 3:
            logger.error("‚ùå ASR –ù–ï –†–ê–°–ü–û–ó–ù–ê–õ –†–ï–ß–¨!")
            logger.error("   –í–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫—É—é.")
            logger.error("")
            logger.error("üîß –ß—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:")
            logger.error("   1. –ì–æ–≤–æ—Ä–∏ –ì–†–û–ú–ß–ï –∏ –ß–Å–¢–ß–ï")
            logger.error("   2. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ–¥–µ–ª—å –ø–æ–±–æ–ª—å—à–µ: ASR_MODEL=small")
            logger.error("   3. –£–±–µ—Ä–∏ —Ñ–æ–Ω–æ–≤—ã–π —à—É–º (–º—É–∑—ã–∫–∞, —Ç–µ–ª–µ–≤–∏–∑–æ—Ä)")
            return False
        
        logger.success(f"‚úÖ ASR –†–ê–ë–û–¢–ê–ï–¢!")
        logger.info(f"   –†–∞—Å–ø–æ–∑–Ω–∞–ª: '{text}'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ASR: {e}")
        logger.exception(e)
        return False


def test_voice_profile():
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≥–æ–ª–æ—Å–∞"""
    print_step(4, "–ü–†–û–í–ï–†–ö–ê –ü–†–û–§–ò–õ–Ø –ì–û–õ–û–°–ê")
    
    logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Ñ–∏–ª—è.")
    logger.info("–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ (–®–∞–≥ 5).")
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    profiles = list(Path("profiles").glob("*.npz"))
    
    if not profiles:
        logger.error("‚ùå –ù–ï–¢ –ù–ò –û–î–ù–û–ì–û –ü–†–û–§–ò–õ–Ø –ì–û–õ–û–°–ê!")
        logger.error("")
        logger.error("üîß –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å:")
        logger.error("   ./run.sh enroll")
        return False
    
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
    for i, p in enumerate(profiles, 1):
        logger.info(f"  {i}. {p.name}")
    
    return True


def test_full_cycle():
    """–¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª"""
    print_step(5, "–ü–û–õ–ù–´–ô –¶–ò–ö–õ (10 —Å–µ–∫—É–Ω–¥)")
    
    logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –∑–∞–ø—É—Å—Ç–∏–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ 10 —Å–µ–∫—É–Ω–¥.")
    logger.info("")
    logger.info("üìã –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:")
    logger.info("  1. –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è")
    logger.info("  2. –ö—Ç–æ-—Ç–æ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –≤–∫–ª—é—á–∏ –≤–∏–¥–µ–æ)")
    logger.info("  3. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ–≥–¥–∞ —É—Å–ª—ã—à–∏—à—å —Ç–µ–∑–∏—Å")
    logger.info("  4. –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è")
    logger.info("")
    logger.info("üìù –ü–†–ò–ú–ï–†:")
    logger.info("  - –í–æ–ø—Ä–æ—Å: '–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ?'")
    logger.info("  - –°–∏—Å—Ç–µ–º–∞: '–í 1865 –≥–æ–¥—É...' (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç)")
    logger.info("  - –¢–´: '–í 1865 –≥–æ–¥—É'")
    logger.info("  - –°–∏—Å—Ç–µ–º–∞: '–¢–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç' ‚Üê —ç—Ç–æ —É—Å–ø–µ—Ö!")
    logger.info("")
    
    ask_continue()
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profiles = list(Path("profiles").glob("*.npz"))
    if not profiles:
        logger.error("‚ùå –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π! –°–æ–∑–¥–∞–π: ./run.sh enroll")
        return False
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profiles[0].name}")
    
    try:
        import subprocess
        
        os.environ["RUN_SECONDS"] = "10"
        os.environ["THESIS_REPEAT_SEC"] = "5"
        
        logger.info("")
        logger.info("üöÄ –ó–ê–ü–£–°–ö! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω!")
        logger.info("   (–ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)")
        logger.info("")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ main.py —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        result = subprocess.run(
            [".venv/bin/python", "main.py", "live", "--profile", str(profiles[0])],
            env={**os.environ, "RUN_SECONDS": "10", "THESIS_REPEAT_SEC": "5"},
            capture_output=False
        )
        
        logger.info("")
        logger.success("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        logger.info("")
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤—ã—à–µ:")
        logger.info("  1. –ï—Å—Ç—å '–Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –≥–æ–ª–æ—Å (ASR): –≤–æ–ø—Ä–æ—Å'? ‚Üê –≤–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        logger.info("  2. –ï—Å—Ç—å '–û—Ç–≤–µ—Ç: ...'? ‚Üê LLM –æ—Ç–≤–µ—Ç–∏–ª")
        logger.info("  3. –ï—Å—Ç—å '–¢–µ–∑–∏—Å (–∏–∑ –æ—Ç–≤–µ—Ç–∞): ...'? ‚Üê —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω")
        logger.info("  4. –ï—Å—Ç—å '–º–æ–π –≥–æ–ª–æ—Å'? ‚Üê —Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        logger.info("  5. –ï—Å—Ç—å '–ú–æ—è —Ä–µ—á—å (ASR): ...'? ‚Üê —Ç–≤–æ–π –æ—Ç–≤–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        logger.info("  6. –ï—Å—Ç—å '–¢–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç'? ‚Üê —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º")
        logger.info("")
        
        return result.returncode == 0
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        logger.exception(e)
        return False


def main():
    logger.info("‚ïî" + "‚ïê" * 78 + "‚ïó")
    logger.info("‚ïë" + " " * 20 + "–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CluelyPro" + " " * 38 + "‚ïë")
    logger.info("‚ïö" + "‚ïê" * 78 + "‚ïù")
    logger.info("")
    logger.info("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—à–∞–≥–æ–≤–æ.")
    logger.info("")
    logger.info("üìã –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
    logger.info("  1. –ú–∏–∫—Ä–æ—Ñ–æ–Ω")
    logger.info("  2. VAD (–¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏)")
    logger.info("  3. ASR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏)")
    logger.info("  4. –ü—Ä–æ—Ñ–∏–ª—å –≥–æ–ª–æ—Å–∞")
    logger.info("  5. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
    logger.info("")
    logger.info("‚è± –ó–∞–π–º—ë—Ç ~5-10 –º–∏–Ω—É—Ç.")
    logger.info("")
    
    ask_continue()
    
    results = {}
    
    # –¢–µ—Å—Ç 1-3: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ü–†–û–ü–£–©–ï–ù–´ - —É–∂–µ –ø—Ä–æ—à–ª–∏ ‚úÖ)
    logger.info("‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –®–∞–≥–∏ 1-3 (–º–∏–∫—Ä–æ—Ñ–æ–Ω, VAD, ASR) - –æ–Ω–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    logger.info("")
    results['microphone'] = True  # –£–∂–µ –ø—Ä–æ—à—ë–ª
    results['vad'] = True  # –£–∂–µ –ø—Ä–æ—à—ë–ª
    results['asr'] = True  # –£–∂–µ –ø—Ä–æ—à—ë–ª
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ—Ñ–∏–ª—å –≥–æ–ª–æ—Å–∞
    results['profile'] = test_voice_profile()
    if not results['profile']:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π threshold")
    
    # –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    results['full_cycle'] = test_full_cycle()
    
    # –ò—Ç–æ–≥–∏
    print_step("–ò–¢–û–ì–ò", "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for key, value in results.items():
        status = "‚úÖ OK" if value else "‚ùå FAIL"
        logger.info(f"  {key:15} {status}")
    
    logger.info("")
    
    all_ok = all(results.values())
    
    if all_ok:
        logger.success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.success("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        logger.info("")
        logger.info("üöÄ –ó–∞–ø—É—Å–∫:")
        logger.info("   THESIS_REPEAT_SEC=10 ./run.sh live --profile profiles/*.npz")
    else:
        failed = [k for k, v in results.items() if not v]
        logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(failed)}")
        logger.error("   –°–º–æ—Ç—Ä–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.")
    
    logger.info("")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n\n–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        sys.exit(0)
