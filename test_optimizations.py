"""
–¢–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π CluelyPro
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""
import os
import sys
import time
from pathlib import Path

# –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
sys.path.insert(0, str(Path(__file__).parent))

# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ loguru –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
import logging
logging.basicConfig(level=logging.INFO, format="%(levelname)-8s | %(message)s")


def test_cerebras_api():
    """
    ‚úÖ –¢–ï–°–¢ 3B: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Cerebras API
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 3B: Cerebras API")
    print("="*70)
    
    try:
        from cerebras_llm import CerebrasLLM, CEREBRAS_AVAILABLE
        
        if not CEREBRAS_AVAILABLE:
            print("‚ùå FAILED: openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Cerebras)")
            return False
        
        api_key = os.getenv("CEREBRAS_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è  SKIPPED: CEREBRAS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return True  # Skip, –Ω–µ –æ—à–∏–±–∫–∞
        
        print(f"‚úì API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        cerebras = CerebrasLLM(
            api_key=api_key,
            model="llama3.3-70b",
            max_tokens=100,
            temperature=0.3,
        )
        print("‚úì CerebrasLLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤
        start = time.time()
        theses = cerebras.generate_theses(
            question="–ö—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ—Ç–µ–ª –≤ –∫–æ—Å–º–æ—Å?",
            n=3,
        )
        elapsed = (time.time() - start) * 1000
        
        if not theses:
            print("‚ùå FAILED: Cerebras –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∑–∏—Å–æ–≤")
            return False
        
        print(f"‚úì Cerebras –≤–µ—Ä–Ω—É–ª {len(theses)} —Ç–µ–∑–∏—Å–æ–≤ –∑–∞ {elapsed:.0f}–º—Å")
        print(f"  –¢–µ–∑–∏—Å—ã: {theses}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ 2 —Å–µ–∫—É–Ω–¥)
        if elapsed > 2000:
            print(f"‚ö†Ô∏è  WARNING: Cerebras –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ ({elapsed:.0f}–º—Å > 2000–º—Å)")
        
        print("‚úÖ PASSED: Cerebras API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_thesis_generator_with_cerebras():
    """
    ‚úÖ –¢–ï–°–¢ 3B: –ü—Ä–æ–≤–µ—Ä–∫–∞ ThesisGenerator —Å Cerebras –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π LLM
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 3B: ThesisGenerator —Å Cerebras primary")
    print("="*70)
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Cerebras –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é LLM
        os.environ["USE_LLM_ENGINE"] = "cerebras"
        
        from thesis_generator import GeminiThesisGenerator
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á–∏ –µ—Å—Ç—å
        if not os.getenv("CEREBRAS_API_KEY"):
            print("‚ö†Ô∏è  SKIPPED: CEREBRAS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True
        
        if not os.getenv("GEMINI_API_KEY"):
            print("‚ö†Ô∏è  SKIPPED: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = GeminiThesisGenerator()
        print(f"‚úì ThesisGenerator —Å–æ–∑–¥–∞–Ω, primary_engine={generator.primary_engine}")
        
        if generator.primary_engine != "cerebras":
            print(f"‚ùå FAILED: primary_engine –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'cerebras', –Ω–æ {generator.primary_engine}")
            return False
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        start = time.time()
        theses = generator.generate(
            question_text="–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?",
            n=3,
            language="ru"
        )
        elapsed = (time.time() - start) * 1000
        
        if not theses:
            print("‚ùå FAILED: –ù–µ –ø–æ–ª—É—á–µ–Ω—ã —Ç–µ–∑–∏—Å—ã")
            return False
        
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(theses)} —Ç–µ–∑–∏—Å–æ–≤ –∑–∞ {elapsed:.0f}–º—Å")
        print(f"  –¢–µ–∑–∏—Å—ã: {theses}")
        
        print("‚úÖ PASSED: ThesisGenerator —Å Cerebras —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if "USE_LLM_ENGINE" in os.environ:
            del os.environ["USE_LLM_ENGINE"]


def test_tts_cache():
    """
    ‚úÖ –¢–ï–°–¢ 2B: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 2B: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–∫—ç—à)")
    print("="*70)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ThesisManager –∏–º–µ–µ—Ç –∫—ç—à
        from live_recognizer import ThesisManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ TTS (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞)
        manager = ThesisManager(generator=None, tts_engine=None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        if not hasattr(manager, 'audio_cache'):
            print("‚ùå FAILED: ThesisManager –Ω–µ –∏–º–µ–µ—Ç audio_cache")
            return False
        print("‚úì ThesisManager.audio_cache —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if not hasattr(manager, 'tts_executor'):
            print("‚ùå FAILED: ThesisManager –Ω–µ –∏–º–µ–µ—Ç tts_executor")
            return False
        print("‚úì ThesisManager.tts_executor —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if not hasattr(manager, 'prefetch_enabled'):
            print("‚ùå FAILED: ThesisManager –Ω–µ –∏–º–µ–µ—Ç prefetch_enabled")
            return False
        print("‚úì ThesisManager.prefetch_enabled —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        if not hasattr(manager, '_generate_tts_audio'):
            print("‚ùå FAILED: ThesisManager –Ω–µ –∏–º–µ–µ—Ç _generate_tts_audio")
            return False
        print("‚úì ThesisManager._generate_tts_audio —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if not hasattr(manager, 'get_cached_audio'):
            print("‚ùå FAILED: ThesisManager –Ω–µ –∏–º–µ–µ—Ç get_cached_audio")
            return False
        print("‚úì ThesisManager.get_cached_audio —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ PASSED: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è TTS –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_parallel_generation():
    """
    ‚úÖ –¢–ï–°–¢ 3C: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤ + –ø—Ä–æ–≥—Ä–µ–≤ TTS
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 3C: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –ø—Ä–æ–≥—Ä–µ–≤ TTS")
    print("="*70)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ–¥–µ –µ—Å—Ç—å ThreadPoolExecutor
        from live_recognizer import LiveVoiceVerifier
        import inspect
        
        source = inspect.getsource(LiveVoiceVerifier._handle_foreign_text)
        
        if "ThreadPoolExecutor" not in source:
            print("‚ùå FAILED: ThreadPoolExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _handle_foreign_text")
            return False
        print("‚úì ThreadPoolExecutor –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        
        if "generate_theses" not in source or "warmup_tts" not in source:
            print("‚ùå FAILED: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        print("‚úì –§—É–Ω–∫—Ü–∏–∏ generate_theses –∏ warmup_tts –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å as_completed
        if "executor.submit" not in source:
            print("‚ùå FAILED: executor.submit –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print("‚úì executor.submit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        
        print("‚úÖ PASSED: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_metrics_logging():
    """
    ‚úÖ –¢–ï–°–¢ 8A: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 8A: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
    print("="*70)
    
    try:
        from live_recognizer import LiveVoiceVerifier
        import inspect
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º _handle_foreign_text
        source = inspect.getsource(LiveVoiceVerifier._handle_foreign_text)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ ASR –∏ Gemini
        if "asr_elapsed" not in source:
            print("‚ùå FAILED: asr_elapsed –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        print("‚úì ASR –º–µ—Ç—Ä–∏–∫–∞ (asr_elapsed) –Ω–∞–π–¥–µ–Ω–∞")
        
        if "llm_elapsed" not in source:
            print("‚ùå FAILED: llm_elapsed –º–µ—Ç—Ä–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        print("‚úì LLM –º–µ—Ç—Ä–∏–∫–∞ (llm_elapsed) –Ω–∞–π–¥–µ–Ω–∞")
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
        if "–ú–ï–¢–†–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –í–û–ü–†–û–°–ê" not in source:
            print("‚ùå FAILED: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print("‚úì –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ –º–µ—Ç—Ä–∏–∫ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º _speak_text
        source_speak = inspect.getsource(LiveVoiceVerifier._speak_text)
        
        if "tts_start" not in source_speak or "tts_elapsed" not in source_speak:
            print("‚ùå FAILED: TTS –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ _speak_text")
            return False
        print("‚úì TTS –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ _speak_text")
        
        print("‚úÖ PASSED: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_interrupt_logic():
    """
    ‚úÖ –¢–ï–°–¢ 6B: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 6B: –õ–æ–≥–∏–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    print("="*70)
    
    try:
        from live_recognizer import LiveVoiceVerifier
        import inspect
        
        source = inspect.getsource(LiveVoiceVerifier._handle_foreign_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∑–∏—Å–∞—Ö
        if "if theses:" not in source:
            print("‚ùå FAILED: –ü—Ä–æ–≤–µ—Ä–∫–∞ 'if theses:' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        print("‚úì –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–ø—É—Å—Ç—ã—Ö —Ç–µ–∑–∏—Å–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        if "_tts_generation" not in source:
            print("‚ùå FAILED: _tts_generation counter –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print("‚úì _tts_generation counter –¥–ª—è –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ—Å—Ç–∏")
        
        if "_tts_interrupt" not in source:
            print("‚ùå FAILED: _tts_interrupt —Ñ–ª–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print("‚úì _tts_interrupt —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        
        if "sd.stop()" not in source:
            print("‚ùå FAILED: sd.stop() –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return False
        print("‚úì sd.stop() –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        
        print("‚úÖ PASSED: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_config_optimizations():
    """
    ‚úÖ –¢–ï–°–¢ 3A, 6C: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    """
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢ 3A, 6C: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("="*70)
    
    try:
        # –¢–µ—Å—Ç 3A: max_output_tokens
        from thesis_generator import ThesisGenConfig
        
        cfg = ThesisGenConfig()
        if cfg.max_output_tokens != 180:
            print(f"‚ùå FAILED 3A: max_output_tokens –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 180, –Ω–æ {cfg.max_output_tokens}")
            return False
        print("‚úì 3A: max_output_tokens = 180 ‚úÖ")
        
        # –¢–µ—Å—Ç 6C: queue maxsize
        from live_recognizer import LiveVoiceVerifier
        import inspect
        
        source = inspect.getsource(LiveVoiceVerifier.__init__)
        
        # –ò—â–µ–º maxsize=8
        if "maxsize=8" not in source:
            print("‚ùå FAILED 6C: maxsize –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 8")
            return False
        print("‚úì 6C: queue maxsize = 8 ‚úÖ")
        
        print("‚úÖ PASSED: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """
    –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    """
    print("\n" + "üöÄ "*30)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô CluelyPro")
    print("üöÄ "*30 + "\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úì .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n")
    except:
        print("‚ö†Ô∏è  dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\n")
    
    results = {}
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞)
    results["3A, 6C (Config)"] = test_config_optimizations()
    results["2B (TTS Cache)"] = test_tts_cache()
    results["3C (Parallel Gen)"] = test_parallel_generation()
    results["8A (Metrics)"] = test_metrics_logging()
    results["6B (Interrupt)"] = test_interrupt_logic()
    
    # API —Ç–µ—Å—Ç—ã (—Ç—Ä–µ–±—É—é—Ç –∫–ª—é—á–∏)
    results["3B (Cerebras API)"] = test_cerebras_api()
    results["3B (ThesisGen+Cerebras)"] = test_thesis_generator_with_cerebras()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*70)
    
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} | {test_name}")
    
    print("\n" + "="*70)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.0f}%)")
    print("="*70)
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1


if __name__ == "__main__":
    exit(main())
