#!/usr/bin/env python3
"""
–ê–í–¢–û–¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú –ê–£–î–ò–û.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ test_audio/ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ record_test_audio.py).
–ü–æ–¥–∞—ë—Ç –∏—Ö –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω.
"""
import os
import sys
import time
import queue
import threading
import numpy as np
import soundfile as sf
from pathlib import Path
from loguru import logger

os.environ["THESIS_REPEAT_SEC"] = "5"
os.environ["THESIS_MATCH_THRESHOLD"] = "0.3"
os.environ["FILE_LOG_LEVEL"] = "DEBUG"
os.environ["CONSOLE_LOG_LEVEL"] = "INFO"

logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

from live_recognizer import LiveVoiceVerifier, VoiceProfile

AUDIO_DIR = Path("test_audio")

logger.info("=" * 80)
logger.info("–ê–í–¢–û–¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú –ê–£–î–ò–û")
logger.info("=" * 80)
logger.info("")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å
required_files = ["question.wav", "answer.wav", "question2.wav"]
missing = []
for f in required_files:
    path = AUDIO_DIR / f
    if not path.exists():
        missing.append(f)

if missing:
    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã: {missing}")
    logger.error("")
    logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏:")
    logger.error("  .venv/bin/python record_test_audio.py")
    logger.error("")
    sys.exit(1)

logger.info("‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤—Å–µ –∑–∞–ø–∏—Å–∏:")
for f in required_files:
    info = sf.info(AUDIO_DIR / f)
    logger.info(f"   {f}: {info.duration:.1f}—Å")
logger.info("")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
def load_audio(filename: str) -> np.ndarray:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    audio, sr = sf.read(AUDIO_DIR / filename, dtype='float32')
    
    # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ - –±–µ—Ä—ë–º –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
    if len(audio.shape) > 1:
        audio = audio[:, 0]
    
    # –†–µ—Å–µ–º–ø–ª–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if sr != 16000:
        logger.info(f"–†–µ—Å–µ–º–ø–ª–∏–Ω–≥ {filename}: {sr}Hz ‚Üí 16000Hz")
        from scipy import signal
        audio = signal.resample(audio, int(len(audio) * 16000 / sr))
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å (—É—Å–∏–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ)
    max_amp = np.abs(audio).max()
    if max_amp > 0 and max_amp < 0.1:
        # –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ - —É—Å–∏–ª–∏–≤–∞–µ–º –¥–æ 0.5
        gain = 0.5 / max_amp
        audio = audio * gain
        logger.info(f"–£—Å–∏–ª–µ–Ω–æ –∞—É–¥–∏–æ {filename}: {max_amp:.4f} ‚Üí 0.5 (gain={gain:.1f}x)")
    
    return audio.astype(np.float32)

question_audio = load_audio("question.wav")
answer_audio = load_audio("answer.wav")
question2_audio = load_audio("question2.wav")

logger.info("–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å")
logger.info("")

# –°–æ–∑–¥–∞—ë–º —Å–∏—Å—Ç–µ–º—É
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")

# –í–º–µ—Å—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –±—É–¥–µ–º –ø–æ–¥–∞–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
audio_queue = queue.Queue()

verifier = LiveVoiceVerifier(
    asr_enable=True,
    asr_language="ru",  # –§–æ—Ä—Å–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–π!
    llm_enable=True,
    theses_path=None,
    thesis_autogen_enable=True,
    thesis_match_threshold=0.3,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
profiles = list(Path("profiles").glob("*.npz"))
voice_profile = None
if profiles:
    logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profiles[0].name}")
    voice_profile = VoiceProfile.load(profiles[0])
    if voice_profile is None:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å {profiles[0]}")
        sys.exit(1)
    logger.info("–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
else:
    logger.warning("‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - voice verification –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    logger.warning("   –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å: ./run.sh enroll")

logger.info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
logger.info("")

# –°—á—ë—Ç—á–∏–∫–∏
theses_created = 0
theses_closed = 0
announces = 0

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
_original_announce = verifier._announce_thesis

def tracked_announce():
    global announces
    announces += 1
    if verifier.thesis_prompter:
        text = verifier.thesis_prompter.current_text()[:60]
        logger.info(f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{announces}: {text}...")
    _original_announce()

verifier._announce_thesis = tracked_announce

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∞—á–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ASR
def inject_audio_via_asr(audio: np.ndarray, label: str, is_self: bool):
    """–ü–æ–¥–∞—ë—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ASR –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç"""
    logger.info(f"üéôÔ∏è  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {label}: {len(audio)/16000:.1f}—Å")
    
    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ ASR
    if not verifier._asr:
        logger.error("‚ùå ASR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return
    
    text = verifier._asr.transcribe_np(audio)
    logger.info(f"   ASR —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: '{text}'")
    
    # –ü–æ–¥–∞—ë–º –∫–∞–∫ –¥–∏–∞–ª–æ–≥
    kind = "self" if is_self else "other"
    verifier.simulate_dialogue([(kind, text)])
    
    logger.info(f"   ‚úÖ –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    time.sleep(0.5)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
verifier._start_segment_worker()

try:
    # ========== –†–ê–£–ù–î 1: –í–û–ü–†–û–° ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 1: –ü–û–î–ê–Å–ú –í–û–ü–†–û–°")
    logger.info("=" * 80)
    
    inject_audio_via_asr(question_audio, "–í–û–ü–†–û–°", is_self=False)
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info("‚è≥ –ñ–¥—ë–º 5 —Å–µ–∫ (LLM –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∑–∏—Å)...")
    logger.info("   –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –≤—ã—à–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:")
    logger.info("   - '–Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –≥–æ–ª–æ—Å (ASR): <—Ç–µ–∫—Å—Ç>' - –≤–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
    logger.info("   - '–û—Ç–≤–µ—Ç: ...' - LLM –æ—Ç–≤–µ—Ç–∏–ª")
    logger.info("   - '–¢–µ–∑–∏—Å (–∏–∑ –æ—Ç–≤–µ—Ç–∞): ...' - —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω")
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞!")
        logger.error("   –í–æ–∑–º–æ–∂–Ω–æ ASR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å –∏–ª–∏ LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
        logger.error("")
        logger.error("–°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –≤—ã—à–µ:")
        logger.error("  - –ï—Å–ª–∏ –Ω–µ—Ç '–Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –≥–æ–ª–æ—Å (ASR)' ‚Üí ASR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª")
        logger.error("  - –ï—Å–ª–∏ –Ω–µ—Ç '–û—Ç–≤–µ—Ç:' ‚Üí LLM –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
        logger.error("  - –ï—Å–ª–∏ –Ω–µ—Ç '–¢–µ–∑–∏—Å (–∏–∑ –æ—Ç–≤–µ—Ç–∞)' ‚Üí —Ç–µ–∑–∏—Å –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
        sys.exit(1)
    
    thesis1 = verifier.thesis_prompter.current_text()
    logger.success(f"‚úÖ –¢–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis1[:70]}...")
    theses_created += 1
    
    # –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä—ã
    logger.info("")
    logger.info("‚è≥ –ñ–¥—ë–º 6 —Å–µ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—ã —Ç–µ–∑–∏—Å–∞)...")
    time.sleep(6)
    
    if announces < 2:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ú–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤! –û–∂–∏–¥–∞–ª–æ—Å—å ‚â•2, –±—ã–ª–æ {announces}")
        sys.exit(1)
    
    logger.success(f"‚úÖ –¢–µ–∑–∏—Å –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è {announces} —Ä–∞–∑")
    
    # ========== –†–ê–£–ù–î 2: –¢–í–û–ô –û–¢–í–ï–¢ ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 2: –ü–û–î–ê–Å–ú –¢–í–û–ô –û–¢–í–ï–¢")
    logger.info("=" * 80)
    
    inject_audio_via_asr(answer_audio, "–¢–í–û–ô –û–¢–í–ï–¢", is_self=True)
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info("‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫ (—Ç–µ–∑–∏—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å—Å—è)...")
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã–ª—Å—è
    if verifier.thesis_prompter and verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã–ª—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞!")
        logger.error(f"   –¢–µ–∑–∏—Å: {thesis1[:70]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        try:
            cov = verifier.thesis_prompter.coverage_of_current()
            logger.error(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(cov*100)}% (–Ω—É–∂–Ω–æ ‚â•30%)")
        except:
            pass
        
        logger.error("")
        logger.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.error("  1. ASR –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç")
        logger.error("  2. Voice verification –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–≤–æ–π –≥–æ–ª–æ—Å ('–º–æ–π –≥–æ–ª–æ—Å')")
        logger.error("  3. –°–ª–æ–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–ª–∏ —Å —Ç–µ–∑–∏—Å–æ–º")
        logger.error("  4. –ü–æ—Ä–æ–≥ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π (THESIS_MATCH_THRESHOLD)")
        logger.error("")
        logger.error("–°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ:")
        logger.error("  - '–º–æ–π –≥–æ–ª–æ—Å' - —Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        logger.error("  - '–ú–æ—è —Ä–µ—á—å (ASR): ...' - –æ—Ç–≤–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        logger.error("  - '–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∑–∏—Å–∞: XX%' - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–∫–∞–∑–∞–Ω")
        sys.exit(1)
    
    logger.success("‚úÖ –¢–µ–∑–∏—Å #1 –ó–ê–ö–†–´–¢!")
    theses_closed += 1
    
    # ========== –†–ê–£–ù–î 3: –í–¢–û–†–û–ô –í–û–ü–†–û–° ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 3: –ü–†–û–í–ï–†–ö–ê –ß–¢–û –°–ò–°–¢–ï–ú–ê –ù–ï '–û–ì–õ–û–•–õ–ê'")
    logger.info("=" * 80)
    
    logger.info("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫...")
    time.sleep(2)
    
    inject_audio_via_asr(question2_audio, "–í–û–ü–†–û–° #2", is_self=False)
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info("‚è≥ –ñ–¥—ë–º 3 —Å–µ–∫ (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤—ã–π —Ç–µ–∑–∏—Å)...")
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∑–∏—Å
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω!")
        logger.error("   –°–∏—Å—Ç–µ–º–∞ '–æ–≥–ª–æ—Ö–ª–∞' –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞!")
        logger.error("")
        logger.error("–≠—Ç–æ –∑–Ω–∞—á–∏—Ç –±–∞–≥ –≤ –∫–æ–¥–µ:")
        logger.error("  - ASR –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ TTS")
        logger.error("  - suppress_until –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å—ë")
        logger.error("  - –û—á–µ—Ä–µ–¥—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–±–∏—Ç–∞")
        sys.exit(1)
    
    thesis2 = verifier.thesis_prompter.current_text()
    
    if thesis2 == thesis1:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è (–æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π)!")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis2[:70]}...")
    theses_created += 1
    
    # ========== –ò–¢–û–ì–ò ==========
    logger.info("")
    logger.info("=" * 80)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
    logger.info("=" * 80)
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {theses_created}")
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ: {theses_closed}")
    logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {announces}")
    logger.info("")
    
    if theses_created >= 2 and theses_closed >= 1:
        logger.success("=" * 80)
        logger.success("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.success("=" * 80)
        logger.success("")
        logger.success("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        logger.success("  ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç –≤–æ–ø—Ä–æ—Å—ã —Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ")
        logger.success("  ‚úÖ –°–æ–∑–¥–∞—ë—Ç —Ç–µ–∑–∏—Å—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM")
        logger.success("  ‚úÖ –ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–µ–∑–∏—Å—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏")
        logger.success("  ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∑–∏—Å—ã –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.success("  ‚úÖ –ù–ï '–≥–ª–æ—Ö–Ω–µ—Ç' –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        logger.success("")
        logger.success("–ú–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å! üöÄ")
        sys.exit(0)
    else:
        logger.error("")
        logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        sys.exit(1)

except KeyboardInterrupt:
    logger.warning("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    sys.exit(130)

except Exception as e:
    logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)

finally:
    verifier._stop_segment_worker()
