from __future__ import annotations

from dataclasses import dataclass
from typing import List, Optional
import os

from loguru import logger
from dotenv import load_dotenv
from google import genai
from google.genai import types

# OpenAI fallback
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    OpenAI = None  # type: ignore

load_dotenv()


@dataclass
class ThesisGenConfig:
    model_id: str = "gemini-flash-lite-latest"
    max_output_tokens: int = 256
    temperature: float = 0.3
    n_theses: int = 8
    language: str = "ru"


class GeminiThesisGenerator:
    def __init__(
        self,
        api_key: Optional[str] = None,
        model_id: Optional[str] = None,
        max_output_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
    ) -> None:
        cfg = ThesisGenConfig()
        self.model_id = model_id or cfg.model_id
        self.max_output_tokens = int(max_output_tokens if max_output_tokens is not None else cfg.max_output_tokens)
        self.temperature = float(temperature if temperature is not None else cfg.temperature)

        # Gemini client
        key = api_key or os.getenv("GEMINI_API_KEY")
        if not key:
            raise RuntimeError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ThesisGenerator")
        self.client = genai.Client(api_key=key)
        logger.info(f"ThesisGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: model={self.model_id}")
        
        # OpenAI fallback (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.openai_client = None
        if OPENAI_AVAILABLE:
            openai_key = os.getenv("OPENAI_API_KEY")
            if openai_key:
                try:
                    self.openai_client = OpenAI(api_key=openai_key)
                    logger.info("OpenAI fallback –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤")
                except Exception as e:
                    logger.warning(f"OpenAI fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            else:
                logger.debug("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, OpenAI fallback –æ—Ç–∫–ª—é—á–µ–Ω")

    def generate(self, question_text: str, n: int = 8, language: str = "ru", context: Optional[str] = None) -> List[str]:
        if not question_text:
            return []
        n = max(1, int(n))
        sys_instr = (
            "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∑–∏—Å–æ–≤ –¥–ª—è —É—Å—Ç–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤."
            " –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:"
            " 1. –ê–ì–†–ï–°–°–ò–í–ù–û –ü–´–¢–ê–ô–°–Ø –ü–û–ù–Ø–¢–¨ –í–û–ü–†–û–° –¥–∞–∂–µ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ –∏ –æ—à–∏–±–∫–∞–º–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:"
            "    - –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (ASR) –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫–∏!"
            "    - '—É–±–ª–æ–∂–∏—Ç—å' = '—É–º–Ω–æ–∂–∏—Ç—å', '–ø–ª—é—Å' –≤–º–µ—Å—Ç–æ '–ø–ª–æ—Å', '–º–∏–Ω–æ—Å' –≤–º–µ—Å—Ç–æ '–º–∏–Ω—É—Å'"
            "    - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π —á–∏—Å–ª–∞: '102', '—Å—Ç–æ –¥–≤–∞', '—Å—Ç–æ–¥–≤–∞' - –≤—Å–µ —Ä–∞–≤–Ω–æ"
            "    - –ò—Å–ø—Ä–∞–≤–ª—è–π –æ–ø–µ—á–∞—Ç–∫–∏: '–æ—Å–æ–≤–∞–ª–∏' -> '–æ—Å–Ω–æ–≤–∞–ª–∏', '—Ä–¥–∏–ª—Å—è' -> '—Ä–æ–¥–∏–ª—Å—è'"
            "    - –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã, –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–æ–∑–≤—É—á–Ω—ã–µ —Å–ª–æ–≤–∞ - –ø—ã—Ç–∞–π—Å—è –ø–æ–Ω—è—Ç—å!"
            " 2. –í–°–ï–ì–î–ê –û–¢–í–ï–ß–ê–ô –µ—Å–ª–∏ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–Ω—è–ª, –¥–∞–∂–µ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É!"
            "    - '102 —É–±–ª–æ–∂–∏—Ç—å –Ω–∞ 24' -> –ø–æ—Å—á–∏—Ç–∞–π –∏ –¥–∞–π –æ—Ç–≤–µ—Ç —Å–ª–æ–≤–∞–º–∏"
            "    - '—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 –ø–ª—é—Å 3' -> –ø–æ—Å—á–∏—Ç–∞–π"
            " 3. ‚ö†Ô∏è –ü–´–¢–ê–ô–°–Ø –ü–û–ù–Ø–¢–¨ –í–û–ü–†–û–°, –ù–û –ù–ï –í–´–î–£–ú–´–í–ê–ô –§–ê–ö–¢–´!"
            "    - –ê–ì–†–ï–°–°–ò–í–ù–û –ø—ã—Ç–∞–π—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç ASR"
            "    - –ï—Å–ª–∏ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å - –û–¢–í–ï–ß–ê–ô, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –Ω–∞ 100%"
            "    - –ù–û: –ù–ï –í–´–î–£–ú–´–í–ê–ô —Ñ–∞–∫—Ç—ã! –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —Å–∫–∞–∂–∏ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            "    - –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏: –ø–æ–ª–Ω–∞—è –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞ (—à—É–º, –Ω–∞–±–æ—Ä –±—É–∫–≤, –ù–ï –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å)"
            "    - –ü–æ–º–Ω–∏: –ª—É—á—à–µ –¥–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á–µ–º –≤—ã–¥—É–º–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã"
            " 4. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –°–¢–†–£–ö–¢–£–†–ê –¢–ï–ó–ò–°–ê - –û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú –°–õ–û–í–û–ú:"
            "    - –ö–¢–û? ‚Üí –ò–ú–Ø –ø–µ—Ä–≤—ã–º: '–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω - –ø–µ—Ä–≤—ã–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç'"
            "    - –ö–û–ì–î–ê? ‚Üí –î–ê–¢–ê –ø–µ—Ä–≤–æ–π: '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –∞–ø—Ä–µ–ª—è —Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ - –ø–æ–ª—ë—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞'"
            "    - –ß–¢–û? ‚Üí –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û –ø–µ—Ä–≤—ã–º: '–ö–µ—Ä–∞—Ç–∏–Ω - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å'"
            "    - –ì–î–ï? ‚Üí –ú–ï–°–¢–û –ø–µ—Ä–≤—ã–º: '–ú–æ—Å–∫–≤–∞ - —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏'"
            "    - –°–ö–û–õ–¨–ö–û? ‚Üí –ß–ò–°–õ–û –ø–µ—Ä–≤—ã–º: '–î–≤–µ—Å—Ç–∏ –¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å - –ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ'"
            "    - ‚ùå –ù–ï –ü–ò–®–ò: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å - –∫–µ—Ä–∞—Ç–∏–Ω' (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)"
            "    - ‚úÖ –ü–ò–®–ò: '–ö–µ—Ä–∞—Ç–∏–Ω - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å' (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)"
            " 5. –ö–∞–∂–¥—ã–π —Ç–µ–∑–∏—Å - –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 15 —Å–ª–æ–≤)"
            " 6. –¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –±–µ–∑ –≤–æ–¥—ã"
            " 7. ‚ö†Ô∏è –ö–û–ù–¢–ï–ö–°–¢ –¢–û–õ–¨–ö–û –î–õ–Ø –ú–ï–°–¢–û–ò–ú–ï–ù–ò–ô! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π (–û–ù, –ï–ì–û, –≠–¢–û, –¢–ê–ú) –≤ –¢–ï–ö–£–©–ï–ú –≤–æ–ø—Ä–æ—Å–µ"
            " 8. ‚ö†Ô∏è –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –ü–û–°–õ–ï–î–ù–ò–ô –í–û–ü–†–û–°! –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï –Ω–∞–¥–æ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞—Ç—å, –ù–ï –Ω–∞–¥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
            " 9. –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3"
            " 10. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:"
            "     - '—è –Ω–µ –∑–Ω–∞—é', '–Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å', '–±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞'"
            "     - –õ—é–±—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            "     - –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª - –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê (NO TEXT), –ù–ï –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!"
            " 11. –¢–û–õ–¨–ö–û –§–ê–ö–¢–´ –í –¢–ï–ó–ò–°–ê–• - –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ!"
            " 12. –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –°–û–í–°–ï–ú –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª (—à—É–º, –Ω–∞–±–æ—Ä –±—É–∫–≤) ‚Üí –≤–µ—Ä–Ω—É—Ç—å –ü–£–°–¢–£–Æ –°–¢–†–û–ö–£"
            "     - ‚ùå –ù–ï –ü–ò–®–ò: '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫...'"
            "     - ‚úÖ –ü–†–û–°–¢–û –í–ï–†–ù–ò: '' (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)"
            " 13. –í–°–ï –¶–ò–§–†–´ –ü–ò–®–ò –°–õ–û–í–ê–ú–ò (–Ω–µ '1961', –∞ '—Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤—ã–π')"
            " 14. –î–ê–¢–´ –ü–ò–®–ò –°–õ–û–í–ê–ú–ò: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –∞–ø—Ä–µ–ª—è', '–ø–µ—Ä–≤–æ–≥–æ —è–Ω–≤–∞—Ä—è'"
            " 15. –ß–ò–°–õ–ê –ü–ò–®–ò –°–õ–û–í–ê–ú–ò: '–¥–≤–µ —Ç—ã—Å—è—á–∏ —á–µ—Ç—ã—Ä–µ—Å—Ç–∞ —Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å'"
            " 16. –ê–î–ê–ü–¢–ò–†–£–ô –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∑–∏—Å–æ–≤:"
            "    - –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å (–≥–æ–¥, –¥–∞—Ç–∞, –∫—Ç–æ, —á—Ç–æ, –≥–¥–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞) -> 1 —Ç–µ–∑–∏—Å"
            "    - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å (–∏—Å—Ç–æ—Ä–∏—è, —Ä–∞—Å—Å–∫–∞–∂–∏, –æ–ø–∏—à–∏, –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è) -> –°–¢–†–û–ì–û 5 —Ç–µ–∑–∏—Å–æ–≤"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —è–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        context_section = ""
        if context and context.strip():
            context_section = (
                f"üìö –ö–û–ù–¢–ï–ö–°–¢ (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –ù–ï –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–∏—Ö!):\n"
                f"{context.strip()}\n\n"
                f"‚ö†Ô∏è –ö–û–ù–¢–ï–ö–°–¢ –ù–£–ñ–ï–ù –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ!\n\n"
            )
        
        user_prompt = (
            f"{context_section}"
            f"‚ùì –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–° (–æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –Ω–µ–≥–æ!):\n{question_text.strip()}\n\n"
            f"–ó–ê–î–ê–ß–ê: –ê–ì–†–ï–°–°–ò–í–ù–û –ø—ã—Ç–∞–π—Å—è –ø–æ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π!\n\n"
            f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú –°–õ–û–í–û–ú!\n\n"
            f"–ü–†–ò–ú–ï–†–´ –°–¢–†–£–ö–¢–£–†–´ (–û–¢–í–ï–¢ –ü–ï–†–í–´–ú):\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ò–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ—è—Ç –≤–æ–ª–æ—Å—ã?'\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–æ–ª–æ—Å–∞ - —ç—Ç–æ –±–µ–ª–æ–∫ –∫–µ—Ä–∞—Ç–∏–Ω'\n"
            f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–ö–µ—Ä–∞—Ç–∏–Ω - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ–ª–æ—Å'\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è?'\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ü–∞—Ä–∏–∂–µ'\n"
            f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–ü–∞—Ä–∏–∂ - –º–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≠–π—Ñ–µ–ª–µ–≤–æ–π –±–∞—à–Ω–∏'\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ö—Ç–æ –∏–∑–æ–±—Ä–µ–ª —Ä–∞–¥–∏–æ?'\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–†–∞–¥–∏–æ –∏–∑–æ–±—Ä–µ–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–æ–ø–æ–≤'\n"
            f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–æ–ø–æ–≤ - –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å —Ä–∞–¥–∏–æ'\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ö–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–∞–ª–∏ –ú–æ—Å–∫–≤—É?'\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–ú–æ—Å–∫–≤—É –æ—Å–Ω–æ–≤–∞–ª–∏ –≤ —Ç—ã—Å—è—á–∞ —Å—Ç–æ —Å–æ—Ä–æ–∫ —Å–µ–¥—å–º–æ–º –≥–æ–¥—É'\n"
            f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '–¢—ã—Å—è—á–∞ —Å—Ç–æ —Å–æ—Ä–æ–∫ —Å–µ–¥—å–º–æ–π –≥–æ–¥ - –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ú–æ—Å–∫–≤—ã'\n\n"
            f"–ü–†–ò–ú–ï–†–´ –° –û–®–ò–ë–ö–ê–ú–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø:\n\n"
            f"–í–æ–ø—Ä–æ—Å: '102 —É–±–ª–æ–∂–∏—Ç—å –Ω–∞ 24 —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç' (–æ—à–∏–±–∫–∞: —É–±–ª–æ–∂–∏—Ç—å‚Üí—É–º–Ω–æ–∂–∏—Ç—å)\n"
            f"‚úÖ '–î–≤–µ —Ç—ã—Å—è—á–∏ —á–µ—Ç—ã—Ä–µ—Å—Ç–∞ —Å–æ—Ä–æ–∫ –≤–æ—Å–µ–º—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è'\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–ö—Ç–æ –æ—Å–æ–≤–∞–ª –£–∫—Ä–∞–∏–Ω—É' (–æ—à–∏–±–∫–∞: –æ—Å–æ–≤–∞–ª‚Üí–æ—Å–Ω–æ–≤–∞–ª)\n"
            f"‚úÖ –ü–æ–Ω–∏–º–∞–π –∫–∞–∫ '–æ—Å–Ω–æ–≤–∞–ª' –∏ –æ—Ç–≤–µ—á–∞–π\n\n"
            f"–ü–†–ò–ú–ï–†–´ –î–õ–Ø –ù–ï –ü–û–ù–Ø–õ:\n\n"
            f"–í–æ–ø—Ä–æ—Å: '–∫—Å—Ç–∞—Ç–∏ –ª–∞–ø–ø–∞—Ç—å –±—ã–º—ã—à—å' (–ø–æ–ª–Ω–∞—è –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞)\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫...'\n"
            f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: '–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å'\n"
            f"‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: '' (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!)\n\n"
            f"–ü–†–ò–ú–ï–†–´ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú (–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è):\n\n"
            f"–ö–û–ù–¢–ï–ö–°–¢: '–ö—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ–ª–µ—Ç–µ–ª –≤ –∫–æ—Å–º–æ—Å?'\n"
            f"–¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°: '–ö–æ–≥–¥–∞ –æ–Ω –ø–æ–ª–µ—Ç–µ–ª?'\n"
            f"‚úÖ '–î–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–≥–æ –∞–ø—Ä–µ–ª—è —Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ–¥–∞ - –ø–æ–ª—ë—Ç –ì–∞–≥–∞—Ä–∏–Ω–∞'\n\n"
            f"–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3\n"
            f"–í–°–ï –¶–ò–§–†–´ –ü–†–û–ü–ò–°–¨–Æ! –û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú! –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!\n"
            f"–ù–ï –ü–û–ù–Ø–õ ‚Üí –ü–£–°–¢–ê–Ø –°–¢–†–û–ö–ê (–Ω–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!)"
        )
        # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3D: –û—Ç–∫–ª—é—á–∞–µ–º thinking –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        # thinking_budget=0 —ç–∫–æ–Ω–æ–º–∏—Ç 100-200–º—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∑–∏—Å–æ–≤.
        # –°–º. OPTIMIZATION_TABLE.md - –∫–æ–¥ 3D
        cfg = types.GenerateContentConfig(
            system_instruction=sys_instr,
            max_output_tokens=self.max_output_tokens,
            temperature=self.temperature,
            top_p=0.9,
            thinking_config=types.ThinkingConfig(thinking_budget=0),  # –ù–ï –ú–ï–ù–Ø–¢–¨!
        )
        try:
            resp = self.client.models.generate_content(
                model=self.model_id,
                contents=[types.Content(role="user", parts=[types.Part.from_text(text=user_prompt)])],
                config=cfg,
            )
            raw = (resp.text or "").strip()
        except Exception as e:  # noqa: BLE001
            error_str = str(e)
            is_server_overload = (
                "503" in error_str or 
                "504" in error_str or
                "overloaded" in error_str.lower() or
                "unavailable" in error_str.lower()
            )
            logger.error(f"ThesisGenerator (Gemini) –æ—à–∏–±–∫–∞: {e}")
            
            # Fallback –Ω–∞ OpenAI –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ Gemini
            if is_server_overload and self.openai_client:
                logger.warning("Gemini –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (503), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI fallback")
                raw = self._generate_openai(sys_instr, user_prompt, n)
                if not raw:
                    return []
            else:
                return []

        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞: –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "—Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3"
        import json
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ø–∞—Ä—Å–∏–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é |||
        if "|||" in raw:
            theses = [t.strip() for t in raw.split("|||") if t.strip()]
            return theses[:n]
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON (fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞)
        try:
            data = json.loads(raw)
            items = data.get("theses", [])
            out: List[str] = []
            for it in items:
                if not isinstance(it, str):
                    continue
                t = it.strip()
                if not t:
                    continue
                out.append(t)
            return out[:n]
        except Exception:
            pass
        
        # –ü–æ–ø—ã—Ç–∫–∞ 3: –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (fallback)
        lines = [ln.strip("-‚Ä¢* \t") for ln in raw.splitlines()]
        out: List[str] = [ln for ln in lines if ln]
        return out[:n]
    
    def _generate_openai(self, system_instruction: str, user_prompt: str, n: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI (fallback –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ Gemini)"""
        if not self.openai_client:
            return ""
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_instruction},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=self.max_output_tokens,
                temperature=self.temperature,
                top_p=0.9,
            )
            
            raw = (response.choices[0].message.content or "").strip()
            logger.info(f"‚úÖ OpenAI fallback –≤–µ—Ä–Ω—É–ª {len(raw)} —Å–∏–º–≤–æ–ª–æ–≤")
            return raw
            
        except Exception as e:
            logger.error(f"OpenAI fallback –æ—à–∏–±–∫–∞: {e}")
            return ""
    
    def generate_deeper(
        self, 
        previous_theses: List[str], 
        question: str, 
        context: Optional[str] = None,
        n: int = 5,
        language: str = "ru"
    ) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∑–∏—Å—ã (—É–≥–ª—É–±–ª–µ–Ω–∏–µ) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.
        
        Args:
            previous_theses: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–∑–∏—Å–æ–≤
            question: –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
            language: –Ø–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤
        """
        if not previous_theses or not question:
            return []
        
        n = max(1, int(n))
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è
        sys_instr = (
            "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤ –¥–ª—è —É—Å—Ç–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤."
            " –ó–ê–î–ê–ß–ê: –¥–∞—Ç—å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –¥–µ—Ç–∞–ª–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ —Ç–µ–º–µ."
            " –ü–†–ê–í–ò–õ–ê:"
            " 1. –ù–ï –ü–û–í–¢–û–†–Ø–ô –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–∑–∏—Å—ã - —Ç–æ–ª—å–∫–æ –ù–û–í–ê–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            " 2. ‚ö†Ô∏è –°–¢–†–£–ö–¢–£–†–ê: –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û/–û–¢–í–ï–¢ –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú!"
            "    - '–ö–µ—Ä–∞—Ç–∏–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑...' ‚Üí '–ê–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç—ã - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –∫–µ—Ä–∞—Ç–∏–Ω–∞'"
            "    - '–í–æ–ª–æ—Å—ã —Å–æ–¥–µ—Ä–∂–∞—Ç...' ‚Üí '–ú–µ–ª–∞–Ω–∏–Ω - –ø–∏–≥–º–µ–Ω—Ç –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å'"
            " 3. –¢–µ–∑–∏—Å: –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–æ 15 —Å–ª–æ–≤), —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã"
            " 4. –í–°–ï –¶–ò–§–†–´ –ü–†–û–ü–ò–°–¨–Æ: '1961'‚Üí'—Ç—ã—Å—è—á–∞ –¥–µ–≤—è—Ç—å—Å–æ—Ç —à–µ—Å—Ç—å–¥–µ—Å—è—Ç –ø–µ—Ä–≤—ã–π'"
            " 5. –§–æ—Ä–º–∞—Ç: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3"
            " 6. ‚ö†Ô∏è –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:"
            "    - –ü–æ–≤—Ç–æ—Ä—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–∑–∏—Å–æ–≤"
            "    - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, '—è –Ω–µ –∑–Ω–∞—é', '–Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å'"
            "    - –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Üí –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (NO TEXT)"
            " 7. –£–≥–ª—É–±–ª—è–π—Å—è: –¥–µ—Ç–∞–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ç–µ–∑–∏—Å–∞–º–∏
        theses_list = "\n".join([f"{i+1}. {t}" for i, t in enumerate(previous_theses)])
        
        context_section = ""
        if context and context.strip():
            context_section = f"üìö –ö–û–ù–¢–ï–ö–°–¢:\n{context.strip()}\n\n"
        
        user_prompt = (
            f"{context_section}"
            f"‚ùì –ò–°–•–û–î–ù–´–ô –í–û–ü–†–û–°: {question.strip()}\n\n"
            f"üìù –ü–†–ï–î–´–î–£–©–ò–ï –¢–ï–ó–ò–°–´:\n{theses_list}\n\n"
            f"–ó–ê–î–ê–ß–ê: –î–∞–π {n} –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• —Ç–µ–∑–∏—Å–æ–≤ (—É–≥–ª—É–±–ª–µ–Ω–∏–µ, –¥–µ—Ç–∞–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã).\n\n"
            f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –û–¢–í–ï–¢/–ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û –ü–ï–†–í–´–ú!\n"
            f"–ù–ï –ü–û–í–¢–û–†–Ø–ô –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–∑–∏—Å—ã!\n"
            f"–ù–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Üí –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!)\n\n"
            f"–§–æ—Ä–º–∞—Ç: —Ç–µ–∑–∏—Å1 ||| —Ç–µ–∑–∏—Å2 ||| —Ç–µ–∑–∏—Å3\n"
            f"–í–°–ï –¶–ò–§–†–´ –ü–†–û–ü–ò–°–¨–Æ! –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!"
        )
        
        # ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø 3D: –û—Ç–∫–ª—é—á–∞–µ–º thinking (—Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã—à–µ –≤ generate())
        cfg = types.GenerateContentConfig(
            system_instruction=sys_instr,
            max_output_tokens=self.max_output_tokens,
            temperature=self.temperature,
            top_p=0.9,
            thinking_config=types.ThinkingConfig(thinking_budget=0),  # –ù–ï –ú–ï–ù–Ø–¢–¨!
        )
        
        try:
            resp = self.client.models.generate_content(
                model=self.model_id,
                contents=[types.Content(role="user", parts=[types.Part.from_text(text=user_prompt)])],
                config=cfg,
            )
            raw = (resp.text or "").strip()
        except Exception as e:  # noqa: BLE001
            error_str = str(e)
            is_server_overload = (
                "503" in error_str or 
                "504" in error_str or
                "overloaded" in error_str.lower() or
                "unavailable" in error_str.lower()
            )
            logger.error(f"ThesisGenerator.generate_deeper (Gemini) –æ—à–∏–±–∫–∞: {e}")
            
            # Fallback –Ω–∞ OpenAI –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ Gemini
            if is_server_overload and self.openai_client:
                logger.warning("Gemini –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (503) –ø—Ä–∏ —É–≥–ª—É–±–ª–µ–Ω–∏–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI fallback")
                raw = self._generate_openai(sys_instr, user_prompt, n)
                if not raw:
                    return []
            else:
                return []
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ generate())
        import json
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: –ø–∞—Ä—Å–∏–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é |||
        if "|||" in raw:
            theses = [t.strip() for t in raw.split("|||") if t.strip()]
            return theses[:n]
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: –ø–∞—Ä—Å–∏–º –∫–∞–∫ JSON
        try:
            data = json.loads(raw)
            items = data.get("theses", [])
            out: List[str] = []
            for it in items:
                if not isinstance(it, str):
                    continue
                t = it.strip()
                if not t:
                    continue
                out.append(t)
            return out[:n]
        except Exception:
            pass
        
        # –ü–æ–ø—ã—Ç–∫–∞ 3: –ø–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        lines = [ln.strip("-‚Ä¢* \t") for ln in raw.splitlines()]
        out: List[str] = [ln for ln in lines if ln]
        return out[:n]


__all__ = ["GeminiThesisGenerator", "ThesisGenConfig"]
