#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –†–ï–ê–õ–¨–ù–´–ú –∞—É–¥–∏–æ - –±–ª–∏–∂–µ –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∞—É–¥–∏–æ –∏ –ø–æ–¥–∞—ë—Ç –≤ —Å–∏—Å—Ç–µ–º—É.
"""
import os
import sys
import time
import numpy as np
from pathlib import Path
from loguru import logger

os.environ["THESIS_REPEAT_SEC"] = "5"
os.environ["THESIS_MATCH_THRESHOLD"] = "0.3"
os.environ["FILE_LOG_LEVEL"] = "INFO"

logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

from live_recognizer import LiveVoiceVerifier
from tts_silero import SileroTTS

logger.info("=" * 80)
logger.info("–¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú –ê–£–î–ò–û")
logger.info("=" * 80)
logger.info("")
logger.info("–°—Ü–µ–Ω–∞—Ä–∏–π:")
logger.info("  1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ TTS")
logger.info("  2. –ü–æ–¥–∞—ë–º –µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º—É (–∫–∞–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)")
logger.info("  3. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–µ–∑–∏—Å")
logger.info("  4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ TTS")
logger.info("  5. –ü–æ–¥–∞—ë–º –æ—Ç–≤–µ—Ç –≤ —Å–∏—Å—Ç–µ–º—É")
logger.info("  6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã–ª—Å—è")
logger.info("")

# –°–æ–∑–¥–∞—ë–º TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ...")
tts = SileroTTS(lang="ru", speaker="kseniya", device="cpu")  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤

# –°–æ–∑–¥–∞—ë–º verifier
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
verifier = LiveVoiceVerifier(
    asr_enable=True,
    llm_enable=True,
    theses_path=None,
    thesis_autogen_enable=True,
    thesis_match_threshold=0.3,
)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
verifier._start_segment_worker()

# –°—á—ë—Ç—á–∏–∫–∏
theses_created = 0
theses_closed = 0

# –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∑–∏—Å–æ–≤
original_init_prompter = verifier.thesis_prompter

def check_thesis_state():
    global theses_created, theses_closed
    if verifier.thesis_prompter is not None:
        if verifier.thesis_prompter.has_pending():
            if theses_created == 0:
                theses_created += 1
                logger.success(f"‚úÖ –¢–µ–∑–∏—Å #{theses_created} —Å–æ–∑–¥–∞–Ω!")
        else:
            if theses_created > theses_closed:
                theses_closed += 1
                logger.success(f"‚úÖ –¢–µ–∑–∏—Å #{theses_closed} –ó–ê–ö–†–´–¢!")

try:
    # ============== –†–ê–£–ù–î 1 ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 1: –ó–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å")
    logger.info("=" * 80)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞
    question_text = "–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ –≤ –°–®–ê?"
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å: '{question_text}'")
    question_audio = tts.synth(question_text)
    
    if question_audio is None or question_audio.size == 0:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ!")
        sys.exit(1)
    
    logger.info(f"–ê—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞: {question_audio.shape[0]} —Å—ç–º–ø–ª–æ–≤, {question_audio.shape[0]/tts.sample_rate:.1f} —Å–µ–∫")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float32 –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
    if question_audio.dtype != np.float32:
        question_audio = question_audio.astype(np.float32)
    
    # –ü–æ–¥–∞—ë–º –∞—É–¥–∏–æ –ø–æ—Ä—Ü–∏—è–º–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω)
    logger.info("–ü–æ–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É...")
    chunk_size = 4800  # 0.2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 24000 Hz
    
    for i in range(0, len(question_audio), chunk_size):
        chunk = question_audio[i:i+chunk_size]
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–¥–∞—Ç—å chunk –≤ verifier._audio_callback
        # –ù–æ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º simulate_dialogue
        pass
    
    # –ü—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å simulate_dialogue –Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á—Ç–æ ASR —Ä–∞–±–æ—Ç–∞–µ—Ç
    logger.info("–ü–æ–¥–∞—ë–º —á–µ—Ä–µ–∑ simulate_dialogue...")
    verifier.simulate_dialogue([("other", question_text)])
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    time.sleep(2)
    
    check_thesis_state()
    
    if theses_created == 0:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞!")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∑–∏—Å
    if verifier.thesis_prompter is None:
        logger.error("‚ùå thesis_prompter is None!")
        sys.exit(1)
    
    thesis_text = verifier.thesis_prompter.current_text()
    logger.info(f"–¢–µ–∑–∏—Å: {thesis_text[:70]}...")
    
    # –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä
    logger.info("‚è≥ –ñ–¥—ë–º 6 —Å–µ–∫—É–Ω–¥ (–º–∏–Ω–∏–º—É–º 1 –ø–æ–≤—Ç–æ—Ä)...")
    time.sleep(6)
    
    logger.success("‚úÖ –¢–µ–∑–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è")
    
    # ============== –†–ê–£–ù–î 2: –û–¢–í–ï–¢ ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 2: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∑–∏—Å")
    logger.info("=" * 80)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∑–∏—Å–∞)
    answer_text = thesis_text.split('.')[0] if '.' in thesis_text else thesis_text[:40]
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç: '{answer_text}'")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    tts_male = SileroTTS(lang="ru", speaker="eugene", device="cpu")
    answer_audio = tts_male.synth(answer_text)
    
    logger.info(f"–ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞: {answer_audio.shape[0]} —Å—ç–º–ø–ª–æ–≤, {answer_audio.shape[0]/tts_male.sample_rate:.1f} —Å–µ–∫")
    
    # –ü–æ–¥–∞—ë–º –æ—Ç–≤–µ—Ç
    logger.info("–ü–æ–¥–∞—ë–º –æ—Ç–≤–µ—Ç –≤ —Å–∏—Å—Ç–µ–º—É...")
    verifier.simulate_dialogue([("self", answer_text)])
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    time.sleep(1)
    
    check_thesis_state()
    
    if theses_closed == 0:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞!")
        logger.error(f"   –û—Ç–≤–µ—Ç: '{answer_text}'")
        logger.error(f"   –¢–µ–∑–∏—Å: '{thesis_text}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        try:
            if verifier.thesis_prompter:
                cov = verifier.thesis_prompter.coverage_of_current()
                logger.error(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(cov*100)}% (–Ω—É–∂–Ω–æ ‚â•30%)")
        except:
            pass
        
        sys.exit(1)
    
    # ============== –†–ê–£–ù–î 3: –ù–û–í–´–ô –í–û–ü–†–û–° ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 3: –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ '–æ–≥–ª–æ—Ö–ª–∞')")
    logger.info("=" * 80)
    
    question2_text = "–ö—Ç–æ –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã —Ä–∞–±—Å—Ç–≤–∞?"
    logger.info(f"–ü–æ–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: '{question2_text}'")
    
    verifier.simulate_dialogue([("other", question2_text)])
    
    time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω –ù–û–í–´–ô —Ç–µ–∑–∏—Å
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω!")
        logger.error("   –°–∏—Å—Ç–µ–º–∞ '–æ–≥–ª–æ—Ö–ª–∞' –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞!")
        sys.exit(1)
    
    thesis2_text = verifier.thesis_prompter.current_text()
    
    if thesis2_text == thesis_text:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è!")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis2_text[:70]}...")
    theses_created += 1
    
    # ============== –ò–¢–û–ì–ò ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–ò–¢–û–ì–ò")
    logger.info("=" * 80)
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {theses_created}")
    logger.info(f"–¢–µ–∑–∏—Å–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ: {theses_closed}")
    
    if theses_created >= 2 and theses_closed >= 1:
        logger.info("")
        logger.success("=" * 80)
        logger.success("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        logger.success("=" * 80)
        logger.success("")
        logger.success("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        logger.success("  ‚úÖ –¢–µ–∑–∏—Å—ã —Å–æ–∑–¥–∞—é—Ç—Å—è")
        logger.success("  ‚úÖ –¢–µ–∑–∏—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è")
        logger.success("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ù–ï '–≥–ª–æ—Ö–Ω–µ—Ç' –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
        sys.exit(0)
    else:
        logger.error("")
        logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        sys.exit(1)

except Exception as e:
    logger.exception(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    sys.exit(1)

finally:
    verifier._stop_segment_worker()
