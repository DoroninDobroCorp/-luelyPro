#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–∞ —Ç–µ–∑–∏—Å–æ–≤.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ë–ï–ó —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–µ–∑–∏—Å—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.
"""
import os
import sys
import time
from pathlib import Path
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stderr, level="DEBUG", format="<green>{time:HH:mm:ss.SSS}</green> | <level>{level:8}</level> | {message}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["THESIS_REPEAT_SEC"] = "2"  # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["FILE_LOG_LEVEL"] = "DEBUG"
os.environ["CONSOLE_LOG_LEVEL"] = "DEBUG"

from live_recognizer import LiveVoiceVerifier
from thesis_prompter import ThesisPrompter


class ThesisRepeatTester:
    """–¢–µ—Å—Ç–µ—Ä –ø–æ–≤—Ç–æ—Ä–∞ —Ç–µ–∑–∏—Å–æ–≤"""
    
    def __init__(self):
        self.announce_count = 0
        self.announce_times = []
        self.announced_texts = []
        
    def test_repeat_without_audio(self):
        """–¢–µ—Å—Ç 1: –ü–æ–≤—Ç–æ—Ä —Ç–µ–∑–∏—Å–æ–≤ –±–µ–∑ –∞—É–¥–∏–æ (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        logger.info("=" * 70)
        logger.info("–¢–ï–°–¢ 1: –ü–æ–≤—Ç–æ—Ä —Ç–µ–∑–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫")
        logger.info("=" * 70)
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∑–∏—Å—ã
        test_theses = [
            "Python —Å–æ–∑–¥–∞–ª–∏ –≤ 1991 –≥–æ–¥—É",
            "JavaScript –∏–∑–æ–±—Ä–µ–ª–∏ –≤ 1995 –≥–æ–¥—É",
            "Java –≤—ã–ø—É—Å—Ç–∏–ª–∏ –≤ 1995 –≥–æ–¥—É"
        ]
        
        # –°–æ–∑–¥–∞—ë–º LiveVoiceVerifier —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç—è–∂—ë–ª—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        verifier = LiveVoiceVerifier(
            asr_enable=False,
            llm_enable=False,
            theses_path=None,  # –ù–µ –≥—Ä—É–∑–∏–º –∏–∑ —Ñ–∞–π–ª–∞
            thesis_autogen_enable=False,
        )
        
        # –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∑–∏—Å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
        verifier.thesis_prompter = ThesisPrompter(
            theses=test_theses,
            match_threshold=0.6,
            enable_semantic=False,
            enable_gemini=False,
        )
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ _speak_text –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤
        original_speak = verifier._speak_text
        def mock_speak(text):
            self.announce_count += 1
            self.announce_times.append(time.time())
            self.announced_texts.append(text)
            logger.info(f"üîä –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{self.announce_count}: {text}")
        
        verifier._speak_text = mock_speak
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
        logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
        verifier._start_segment_worker()
        
        # –ñ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
        test_duration = 7  # —Å–µ–∫—É–Ω–¥
        logger.info(f"–û–∂–∏–¥–∞–µ–º {test_duration} —Å–µ–∫—É–Ω–¥ –∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã...")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–∞: {verifier._thesis_repeat_sec} —Å–µ–∫")
        
        # –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
        verifier._announce_thesis()
        time.sleep(0.1)
        
        start_time = time.time()
        while time.time() - start_time < test_duration:
            time.sleep(0.5)
            elapsed = time.time() - start_time
            logger.debug(f"–ü—Ä–æ—à–ª–æ {elapsed:.1f}—Å, –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {self.announce_count}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        verifier._stop_segment_worker()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("")
        logger.info("=" * 70)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
        logger.info("=" * 70)
        logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {self.announce_count}")
        logger.info(f"–û–∂–∏–¥–∞–ª–æ—Å—å: –º–∏–Ω–∏–º—É–º 3 (–ø–µ—Ä–≤–æ–µ + 2 –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞ 7 —Å–µ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫)")
        
        if len(self.announce_times) > 1:
            intervals = [self.announce_times[i] - self.announce_times[i-1] 
                        for i in range(1, len(self.announce_times))]
            logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏: {[f'{x:.1f}—Å' for x in intervals]}")
        
        logger.info("")
        logger.info("–û–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã:")
        for i, text in enumerate(self.announced_texts, 1):
            logger.info(f"  {i}. {text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        logger.info("")
        if self.announce_count >= 3:
            logger.success("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢–µ–∑–∏—Å—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è!")
            return True
        else:
            logger.error(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢–æ–ª—å–∫–æ {self.announce_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –º–∏–Ω–∏–º—É–º 3")
            logger.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.error("  1. –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ _thesis_repeater_loop –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            logger.error("  2. –£—Å–ª–æ–≤–∏—è –≤ _thesis_repeater_loop –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
            logger.error("  3. _last_announce_ts –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
    
    def test_repeat_with_dialogue(self):
        """–¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞"""
        logger.info("")
        logger.info("=" * 70)
        logger.info("–¢–ï–°–¢ 2: –ü–æ–≤—Ç–æ—Ä —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –¥–∏–∞–ª–æ–≥–∞")
        logger.info("=" * 70)
        
        self.announce_count = 0
        self.announce_times = []
        self.announced_texts = []
        
        test_theses = ["–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∑–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞"]
        
        verifier = LiveVoiceVerifier(
            asr_enable=False,
            llm_enable=False,
            theses_path=None,
            thesis_autogen_enable=False,
        )
        
        verifier.thesis_prompter = ThesisPrompter(
            theses=test_theses,
            match_threshold=0.9,  # –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥, —á—Ç–æ–±—ã –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è —Å–ª—É—á–∞–π–Ω–æ
            enable_semantic=False,
            enable_gemini=False,
        )
        
        def mock_speak(text):
            self.announce_count += 1
            self.announce_times.append(time.time())
            self.announced_texts.append(text)
            logger.info(f"üîä –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{self.announce_count}: {text}")
        
        verifier._speak_text = mock_speak
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
        verifier._start_segment_worker()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        logger.info("–ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞...")
        verifier.simulate_dialogue([
            ("other", "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∑–∏—Å")
        ])
        
        # –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä—ã
        test_duration = 5
        logger.info(f"–û–∂–∏–¥–∞–µ–º {test_duration} —Å–µ–∫—É–Ω–¥...")
        time.sleep(test_duration)
        
        verifier._stop_segment_worker()
        
        logger.info("")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {self.announce_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        if self.announce_count >= 2:
            logger.success("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ü–æ–≤—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ!")
            return True
        else:
            logger.error(f"‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: –¢–æ–ª—å–∫–æ {self.announce_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–≤—Ç–æ—Ä–∞ —Ç–µ–∑–∏—Å–æ–≤")
    logger.info("")
    
    tester = ThesisRepeatTester()
    
    results = []
    
    # –¢–µ—Å—Ç 1
    try:
        result1 = tester.test_repeat_without_audio()
        results.append(("–¢–µ—Å—Ç 1: –§–æ–Ω–æ–≤—ã–π –ø–æ–≤—Ç–æ—Ä", result1))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –¢–µ—Å—Ç–µ 1: {e}")
        results.append(("–¢–µ—Å—Ç 1: –§–æ–Ω–æ–≤—ã–π –ø–æ–≤—Ç–æ—Ä", False))
    
    # –¢–µ—Å—Ç 2
    try:
        result2 = tester.test_repeat_with_dialogue()
        results.append(("–¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ", result2))
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ –¢–µ—Å—Ç–µ 2: {e}")
        results.append(("–¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä –≤ –¥–∏–∞–ª–æ–≥–µ", False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    logger.info("")
    logger.info("=" * 70)
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    logger.info("=" * 70)
    
    for test_name, passed in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        logger.info(f"{test_name}: {status}")
    
    all_passed = all(r[1] for r in results)
    
    logger.info("")
    if all_passed:
        logger.success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        sys.exit(0)
    else:
        logger.error("‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´")
        sys.exit(1)


if __name__ == "__main__":
    main()
