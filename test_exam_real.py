#!/usr/bin/env python3
"""
–ù–ê–°–¢–û–Ø–©–ò–ô –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç —Ä–µ–∂–∏–º–∞ —ç–∫–∑–∞–º–µ–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç simulate_dialogue() - –∏–º–∏—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–∞ –ë–ï–ó –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞!
"""
import os
import sys
import time
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
os.environ["THESIS_REPEAT_SEC"] = "3"  # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–≤—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
os.environ["FILE_LOG_LEVEL"] = "INFO"
os.environ["CONSOLE_LOG_LEVEL"] = "INFO"
os.environ["THESIS_MATCH_THRESHOLD"] = "0.3"  # –ü–æ—Ä–æ–≥ 30%

logger.remove()
logger.add(sys.stderr, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level:8}</level> | {message}")

from live_recognizer import LiveVoiceVerifier

logger.info("=" * 80)
logger.info("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –†–ï–ñ–ò–ú–ê –≠–ö–ó–ê–ú–ï–ù–ê")
logger.info("=" * 80)
logger.info("")
logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ë–ï–ó –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:")
logger.info("  1. –í–æ–ø—Ä–æ—Å ‚Üí LLM –æ—Ç–≤–µ—á–∞–µ—Ç ‚Üí –¢–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω")
logger.info("  2. –ü–æ–≤—Ç–æ—Ä —Ç–µ–∑–∏—Å–∞ (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫)")
logger.info("  3. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –¢–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç")
logger.info("  4. –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ‚Üí –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å")
logger.info("")

# –°—á—ë—Ç—á–∏–∫–∏
announced_count = 0
closed_count = 0
theses_created = []

# –°–æ–∑–¥–∞—ë–º verifier
logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
verifier = LiveVoiceVerifier(
    asr_enable=False,  # –û—Ç–∫–ª—é—á–∞–µ–º ASR - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã
    llm_enable=True,   # –í–∫–ª—é—á–∞–µ–º LLM –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    theses_path=None,
    thesis_autogen_enable=True,
    thesis_match_threshold=0.3,
)

# –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
original_speak = verifier._speak_text
original_announce = verifier._announce_thesis

def tracked_speak(text):
    logger.info(f"üîä TTS: {text[:60]}...")
    # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º original_speak - –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤—É–∫–∞

def tracked_announce():
    global announced_count
    announced_count += 1
    if verifier.thesis_prompter:
        text = verifier.thesis_prompter.current_text()
        logger.info(f"üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï #{announced_count}: {text[:60]}...")
        theses_created.append(text)
    # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º original_announce - –±–µ–∑ TTS

verifier._speak_text = tracked_speak
verifier._announce_thesis = tracked_announce

logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤...")
verifier._start_segment_worker()

try:
    # ============== –†–ê–£–ù–î 1 ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 1: –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
    logger.info("=" * 80)
    
    # –í–æ–ø—Ä–æ—Å –æ—Ç —ç–∫–∑–∞–º–µ–Ω–∞—Ç–æ—Ä–∞
    question1 = "–ö–æ–≥–¥–∞ –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞–±—Å—Ç–≤–æ –≤ –°–®–ê?"
    logger.info(f"‚ùì –í–û–ü–†–û–° (—á—É–∂–æ–π –≥–æ–ª–æ—Å): {question1}")
    verifier.simulate_dialogue([("other", question1)])
    
    time.sleep(1)  # –ñ–¥—ë–º LLM
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞!")
        sys.exit(1)
    
    thesis1 = verifier.thesis_prompter.current_text()
    logger.success(f"‚úÖ –¢–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis1[:70]}...")
    
    # –ñ–¥—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
    logger.info("‚è≥ –ñ–¥—ë–º 7 —Å–µ–∫—É–Ω–¥ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â•2 –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 3 —Å–µ–∫)...")
    time.sleep(7)
    
    repeats = announced_count
    logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–µ–∑–∏—Å–∞: {repeats}")
    
    if repeats < 2:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ú–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤! –û–∂–∏–¥–∞–ª–æ—Å—å ‚â•2, –ø–æ–ª—É—á–µ–Ω–æ {repeats}")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ü–æ–≤—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç ({repeats} —Ä–∞–∑)")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–µ–∑–∏—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    answer1 = thesis1.split('.')[0] if '.' in thesis1 else thesis1[:30]
    logger.info("")
    logger.info(f"üí¨ –ú–û–ô –û–¢–í–ï–¢ (—Å–≤–æ–π –≥–æ–ª–æ—Å): {answer1}")
    verifier.simulate_dialogue([("self", answer1)])
    
    time.sleep(0.5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç
    if verifier.thesis_prompter and verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞!")
        logger.error(f"   –û—Ç–≤–µ—Ç: '{answer1}'")
        logger.error(f"   –¢–µ–∑–∏—Å: '{thesis1}'")
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        try:
            cov = verifier.thesis_prompter.coverage_of_current()
            logger.error(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(cov*100)}% (–Ω—É–∂–Ω–æ ‚â•30%)")
        except:
            pass
        sys.exit(1)
    
    closed_count += 1
    logger.success("‚úÖ –¢–µ–∑–∏—Å #1 –ó–ê–ö–†–´–¢!")
    
    # ============== –†–ê–£–ù–î 2 ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–†–ê–£–ù–î 2: –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∞)")
    logger.info("=" * 80)
    
    # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question2 = "–ö—Ç–æ –±—ã–ª –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –°–®–ê –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã —Ä–∞–±—Å—Ç–≤–∞?"
    logger.info(f"‚ùì –í–û–ü–†–û–° (—á—É–∂–æ–π –≥–æ–ª–æ—Å): {question2}")
    verifier.simulate_dialogue([("other", question2)])
    
    time.sleep(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω –ù–û–í–´–ô —Ç–µ–∑–∏—Å
    if verifier.thesis_prompter is None or not verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï —Å–æ–∑–¥–∞–Ω!")
        sys.exit(1)
    
    thesis2 = verifier.thesis_prompter.current_text()
    
    if thesis2 == thesis1:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∑–∏—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)!")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å —Å–æ–∑–¥–∞–Ω: {thesis2[:70]}...")
    
    # –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä
    logger.info("‚è≥ –ñ–¥—ë–º 4 —Å–µ–∫—É–Ω–¥—ã (–º–∏–Ω–∏–º—É–º 1 –ø–æ–≤—Ç–æ—Ä)...")
    repeats_before = announced_count
    time.sleep(4)
    repeats2 = announced_count - repeats_before
    
    logger.info(f"–ü–æ–≤—Ç–æ—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ —Ç–µ–∑–∏—Å–∞: {repeats2}")
    
    if repeats2 < 1:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è!")
        sys.exit(1)
    
    logger.success(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–∑–∏—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ({repeats2} —Ä–∞–∑)")
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å
    answer2 = thesis2.split('.')[0] if '.' in thesis2 else thesis2[:30]
    logger.info("")
    logger.info(f"üí¨ –ú–û–ô –û–¢–í–ï–¢ (—Å–≤–æ–π –≥–æ–ª–æ—Å): {answer2}")
    verifier.simulate_dialogue([("self", answer2)])
    
    time.sleep(0.5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –∑–∞–∫—Ä—ã—Ç
    if verifier.thesis_prompter and verifier.thesis_prompter.has_pending():
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –í—Ç–æ—Ä–æ–π —Ç–µ–∑–∏—Å –ù–ï –∑–∞–∫—Ä—ã—Ç!")
        sys.exit(1)
    
    closed_count += 1
    logger.success("‚úÖ –¢–µ–∑–∏—Å #2 –ó–ê–ö–†–´–¢!")
    
    # ============== –ò–¢–û–ì–ò ==============
    logger.info("")
    logger.info("=" * 80)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
    logger.info("=" * 80)
    logger.info(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {announced_count}")
    logger.info(f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–µ–∑–∏—Å–æ–≤: {closed_count}")
    logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤: {len(set(theses_created))}")
    
    logger.info("")
    logger.info("–ò—Å—Ç–æ—Ä–∏—è —Ç–µ–∑–∏—Å–æ–≤:")
    for i, t in enumerate(set(theses_created), 1):
        logger.info(f"  {i}. {t[:70]}...")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    logger.info("")
    checks = [
        (announced_count >= 4, f"–û–±—ä—è–≤–ª–µ–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (‚â•4): {announced_count}"),
        (closed_count >= 2, f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–µ–∑–∏—Å–æ–≤ (‚â•2): {closed_count}"),
        (len(set(theses_created)) >= 2, f"–†–∞–∑–Ω—ã—Ö —Ç–µ–∑–∏—Å–æ–≤ (‚â•2): {len(set(theses_created))}"),
    ]
    
    all_ok = True
    for passed, msg in checks:
        if passed:
            logger.success(f"‚úÖ {msg}")
        else:
            logger.error(f"‚ùå {msg}")
            all_ok = False
    
    if all_ok:
        logger.info("")
        logger.success("=" * 80)
        logger.success("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.success("=" * 80)
        logger.success("")
        logger.success("–†–µ–∂–∏–º —ç–∫–∑–∞–º–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:")
        logger.success("  ‚úÖ –¢–µ–∑–∏—Å—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ LLM")
        logger.success("  ‚úÖ –¢–µ–∑–∏—Å—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏")
        logger.success("  ‚úÖ –¢–µ–∑–∏—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        logger.success("  ‚úÖ –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏")
        sys.exit(0)
    else:
        logger.error("")
        logger.error("=" * 80)
        logger.error("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        logger.error("=" * 80)
        sys.exit(1)

finally:
    verifier._stop_segment_worker()
